/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AuthProvider } from '../models';
// @ts-ignore
import { AuthProviderList } from '../models';
// @ts-ignore
import { JsonPatchInner } from '../models';
/**
 * AuthHaloRunV1alpha1AuthProviderApi - axios parameter creator
 * @export
 */
export const AuthHaloRunV1alpha1AuthProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthProvider} [authProvider] Fresh authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthHaloRunV1alpha1AuthProvider: async (authProvider?: AuthProvider, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authProvider, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthHaloRunV1alpha1AuthProvider: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteAuthHaloRunV1alpha1AuthProvider', 'name', name)
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthHaloRunV1alpha1AuthProvider: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getAuthHaloRunV1alpha1AuthProvider', 'name', name)
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List auth.halo.run/v1alpha1/AuthProvider
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthHaloRunV1alpha1AuthProvider: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAuthHaloRunV1alpha1AuthProvider: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchAuthHaloRunV1alpha1AuthProvider', 'name', name)
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {AuthProvider} [authProvider] Updated authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthHaloRunV1alpha1AuthProvider: async (name: string, authProvider?: AuthProvider, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateAuthHaloRunV1alpha1AuthProvider', 'name', name)
            const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authProvider, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthHaloRunV1alpha1AuthProviderApi - functional programming interface
 * @export
 */
export const AuthHaloRunV1alpha1AuthProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthHaloRunV1alpha1AuthProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * Create auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthProvider} [authProvider] Fresh authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthHaloRunV1alpha1AuthProvider(authProvider?: AuthProvider, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthHaloRunV1alpha1AuthProvider(authProvider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.createAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthHaloRunV1alpha1AuthProvider(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthHaloRunV1alpha1AuthProvider(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.deleteAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthHaloRunV1alpha1AuthProvider(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthHaloRunV1alpha1AuthProvider(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.getAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List auth.halo.run/v1alpha1/AuthProvider
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthHaloRunV1alpha1AuthProvider(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProviderList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthHaloRunV1alpha1AuthProvider(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.listAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAuthHaloRunV1alpha1AuthProvider(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAuthHaloRunV1alpha1AuthProvider(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.patchAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update auth.halo.run/v1alpha1/AuthProvider
         * @param {string} name Name of authprovider
         * @param {AuthProvider} [authProvider] Updated authprovider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthHaloRunV1alpha1AuthProvider(name: string, authProvider?: AuthProvider, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthHaloRunV1alpha1AuthProvider(name, authProvider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthHaloRunV1alpha1AuthProviderApi.updateAuthHaloRunV1alpha1AuthProvider']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthHaloRunV1alpha1AuthProviderApi - factory interface
 * @export
 */
export const AuthHaloRunV1alpha1AuthProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthHaloRunV1alpha1AuthProviderApiFp(configuration)
    return {
        /**
         * Create auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthProvider> {
            return localVarFp.createAuthHaloRunV1alpha1AuthProvider(requestParameters.authProvider, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAuthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthProvider> {
            return localVarFp.getAuthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthProviderList> {
            return localVarFp.listAuthHaloRunV1alpha1AuthProvider(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthProvider> {
            return localVarFp.patchAuthHaloRunV1alpha1AuthProvider(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update auth.halo.run/v1alpha1/AuthProvider
         * @param {AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthProvider> {
            return localVarFp.updateAuthHaloRunV1alpha1AuthProvider(requestParameters.name, requestParameters.authProvider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Fresh authprovider
     * @type {AuthProvider}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProvider
     */
    readonly authProvider?: AuthProvider
}

/**
 * Request parameters for deleteAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Name of authprovider
     * @type {string}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProvider
     */
    readonly name: string
}

/**
 * Request parameters for getAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Name of authprovider
     * @type {string}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProvider
     */
    readonly name: string
}

/**
 * Request parameters for listAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProvider
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProvider
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProvider
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProvider
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProvider
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Name of authprovider
     * @type {string}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProvider
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProvider
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateAuthHaloRunV1alpha1AuthProvider operation in AuthHaloRunV1alpha1AuthProviderApi.
 * @export
 * @interface AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest
 */
export interface AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest {
    /**
     * Name of authprovider
     * @type {string}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProvider
     */
    readonly name: string

    /**
     * Updated authprovider
     * @type {AuthProvider}
     * @memberof AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProvider
     */
    readonly authProvider?: AuthProvider
}

/**
 * AuthHaloRunV1alpha1AuthProviderApi - object-oriented interface
 * @export
 * @class AuthHaloRunV1alpha1AuthProviderApi
 * @extends {BaseAPI}
 */
export class AuthHaloRunV1alpha1AuthProviderApi extends BaseAPI {
    /**
     * Create auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public createAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiCreateAuthHaloRunV1alpha1AuthProviderRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).createAuthHaloRunV1alpha1AuthProvider(requestParameters.authProvider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public deleteAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiDeleteAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).deleteAuthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public getAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiGetAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).getAuthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public listAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiListAuthHaloRunV1alpha1AuthProviderRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).listAuthHaloRunV1alpha1AuthProvider(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public patchAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiPatchAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).patchAuthHaloRunV1alpha1AuthProvider(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update auth.halo.run/v1alpha1/AuthProvider
     * @param {AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthHaloRunV1alpha1AuthProviderApi
     */
    public updateAuthHaloRunV1alpha1AuthProvider(requestParameters: AuthHaloRunV1alpha1AuthProviderApiUpdateAuthHaloRunV1alpha1AuthProviderRequest, options?: RawAxiosRequestConfig) {
        return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).updateAuthHaloRunV1alpha1AuthProvider(requestParameters.name, requestParameters.authProvider, options).then((request) => request(this.axios, this.basePath));
    }
}

