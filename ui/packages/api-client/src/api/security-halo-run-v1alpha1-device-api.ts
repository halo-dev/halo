/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Device } from '../models';
// @ts-ignore
import { DeviceList } from '../models';
/**
 * SecurityHaloRunV1alpha1DeviceApi - axios parameter creator
 * @export
 */
export const SecurityHaloRunV1alpha1DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create security.halo.run/v1alpha1/Device
         * @param {Device} [device] Fresh device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecurityHaloRunV1alpha1Device: async (device?: Device, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/security.halo.run/v1alpha1/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(device, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecurityHaloRunV1alpha1Device: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSecurityHaloRunV1alpha1Device', 'name', name)
            const localVarPath = `/apis/security.halo.run/v1alpha1/devices/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityHaloRunV1alpha1Device: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSecurityHaloRunV1alpha1Device', 'name', name)
            const localVarPath = `/apis/security.halo.run/v1alpha1/devices/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List security.halo.run/v1alpha1/Device
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityHaloRunV1alpha1Device: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/security.halo.run/v1alpha1/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {Device} [device] Updated device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecurityHaloRunV1alpha1Device: async (name: string, device?: Device, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateSecurityHaloRunV1alpha1Device', 'name', name)
            const localVarPath = `/apis/security.halo.run/v1alpha1/devices/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(device, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityHaloRunV1alpha1DeviceApi - functional programming interface
 * @export
 */
export const SecurityHaloRunV1alpha1DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityHaloRunV1alpha1DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * Create security.halo.run/v1alpha1/Device
         * @param {Device} [device] Fresh device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecurityHaloRunV1alpha1Device(device?: Device, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecurityHaloRunV1alpha1Device(device, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityHaloRunV1alpha1DeviceApi.createSecurityHaloRunV1alpha1Device']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSecurityHaloRunV1alpha1Device(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSecurityHaloRunV1alpha1Device(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityHaloRunV1alpha1DeviceApi.deleteSecurityHaloRunV1alpha1Device']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecurityHaloRunV1alpha1Device(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecurityHaloRunV1alpha1Device(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityHaloRunV1alpha1DeviceApi.getSecurityHaloRunV1alpha1Device']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List security.halo.run/v1alpha1/Device
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecurityHaloRunV1alpha1Device(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecurityHaloRunV1alpha1Device(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityHaloRunV1alpha1DeviceApi.listSecurityHaloRunV1alpha1Device']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update security.halo.run/v1alpha1/Device
         * @param {string} name Name of device
         * @param {Device} [device] Updated device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSecurityHaloRunV1alpha1Device(name: string, device?: Device, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSecurityHaloRunV1alpha1Device(name, device, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityHaloRunV1alpha1DeviceApi.updateSecurityHaloRunV1alpha1Device']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecurityHaloRunV1alpha1DeviceApi - factory interface
 * @export
 */
export const SecurityHaloRunV1alpha1DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityHaloRunV1alpha1DeviceApiFp(configuration)
    return {
        /**
         * Create security.halo.run/v1alpha1/Device
         * @param {SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.createSecurityHaloRunV1alpha1Device(requestParameters.device, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete security.halo.run/v1alpha1/Device
         * @param {SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSecurityHaloRunV1alpha1Device(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get security.halo.run/v1alpha1/Device
         * @param {SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.getSecurityHaloRunV1alpha1Device(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List security.halo.run/v1alpha1/Device
         * @param {SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DeviceList> {
            return localVarFp.listSecurityHaloRunV1alpha1Device(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Update security.halo.run/v1alpha1/Device
         * @param {SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.updateSecurityHaloRunV1alpha1Device(requestParameters.name, requestParameters.device, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSecurityHaloRunV1alpha1Device operation in SecurityHaloRunV1alpha1DeviceApi.
 * @export
 * @interface SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest
 */
export interface SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest {
    /**
     * Fresh device
     * @type {Device}
     * @memberof SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1Device
     */
    readonly device?: Device
}

/**
 * Request parameters for deleteSecurityHaloRunV1alpha1Device operation in SecurityHaloRunV1alpha1DeviceApi.
 * @export
 * @interface SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest
 */
export interface SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest {
    /**
     * Name of device
     * @type {string}
     * @memberof SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1Device
     */
    readonly name: string
}

/**
 * Request parameters for getSecurityHaloRunV1alpha1Device operation in SecurityHaloRunV1alpha1DeviceApi.
 * @export
 * @interface SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest
 */
export interface SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest {
    /**
     * Name of device
     * @type {string}
     * @memberof SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1Device
     */
    readonly name: string
}

/**
 * Request parameters for listSecurityHaloRunV1alpha1Device operation in SecurityHaloRunV1alpha1DeviceApi.
 * @export
 * @interface SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest
 */
export interface SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1Device
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1Device
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1Device
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1Device
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1Device
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for updateSecurityHaloRunV1alpha1Device operation in SecurityHaloRunV1alpha1DeviceApi.
 * @export
 * @interface SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest
 */
export interface SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest {
    /**
     * Name of device
     * @type {string}
     * @memberof SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1Device
     */
    readonly name: string

    /**
     * Updated device
     * @type {Device}
     * @memberof SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1Device
     */
    readonly device?: Device
}

/**
 * SecurityHaloRunV1alpha1DeviceApi - object-oriented interface
 * @export
 * @class SecurityHaloRunV1alpha1DeviceApi
 * @extends {BaseAPI}
 */
export class SecurityHaloRunV1alpha1DeviceApi extends BaseAPI {
    /**
     * Create security.halo.run/v1alpha1/Device
     * @param {SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityHaloRunV1alpha1DeviceApi
     */
    public createSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiCreateSecurityHaloRunV1alpha1DeviceRequest = {}, options?: RawAxiosRequestConfig) {
        return SecurityHaloRunV1alpha1DeviceApiFp(this.configuration).createSecurityHaloRunV1alpha1Device(requestParameters.device, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete security.halo.run/v1alpha1/Device
     * @param {SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityHaloRunV1alpha1DeviceApi
     */
    public deleteSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiDeleteSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig) {
        return SecurityHaloRunV1alpha1DeviceApiFp(this.configuration).deleteSecurityHaloRunV1alpha1Device(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get security.halo.run/v1alpha1/Device
     * @param {SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityHaloRunV1alpha1DeviceApi
     */
    public getSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiGetSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig) {
        return SecurityHaloRunV1alpha1DeviceApiFp(this.configuration).getSecurityHaloRunV1alpha1Device(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List security.halo.run/v1alpha1/Device
     * @param {SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityHaloRunV1alpha1DeviceApi
     */
    public listSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiListSecurityHaloRunV1alpha1DeviceRequest = {}, options?: RawAxiosRequestConfig) {
        return SecurityHaloRunV1alpha1DeviceApiFp(this.configuration).listSecurityHaloRunV1alpha1Device(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update security.halo.run/v1alpha1/Device
     * @param {SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityHaloRunV1alpha1DeviceApi
     */
    public updateSecurityHaloRunV1alpha1Device(requestParameters: SecurityHaloRunV1alpha1DeviceApiUpdateSecurityHaloRunV1alpha1DeviceRequest, options?: RawAxiosRequestConfig) {
        return SecurityHaloRunV1alpha1DeviceApiFp(this.configuration).updateSecurityHaloRunV1alpha1Device(requestParameters.name, requestParameters.device, options).then((request) => request(this.axios, this.basePath));
    }
}

