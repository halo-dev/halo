/* tslint:disable */
/* eslint-disable */
/**
 * Halo Next API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { JsonPatchInner } from '../models';
// @ts-ignore
import { ReasonType } from '../models';
// @ts-ignore
import { ReasonTypeList } from '../models';
/**
 * NotificationHaloRunV1alpha1ReasonTypeApi - axios parameter creator
 * @export
 */
export const NotificationHaloRunV1alpha1ReasonTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create notification.halo.run/v1alpha1/ReasonType
         * @param {ReasonType} [reasonType] Fresh reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationHaloRunV1alpha1ReasonType: async (reasonType?: ReasonType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reasonType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationHaloRunV1alpha1ReasonType: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteNotificationHaloRunV1alpha1ReasonType', 'name', name)
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationHaloRunV1alpha1ReasonType: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getNotificationHaloRunV1alpha1ReasonType', 'name', name)
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List notification.halo.run/v1alpha1/ReasonType
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationHaloRunV1alpha1ReasonType: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNotificationHaloRunV1alpha1ReasonType: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchNotificationHaloRunV1alpha1ReasonType', 'name', name)
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {ReasonType} [reasonType] Updated reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationHaloRunV1alpha1ReasonType: async (name: string, reasonType?: ReasonType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateNotificationHaloRunV1alpha1ReasonType', 'name', name)
            const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reasonType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationHaloRunV1alpha1ReasonTypeApi - functional programming interface
 * @export
 */
export const NotificationHaloRunV1alpha1ReasonTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationHaloRunV1alpha1ReasonTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create notification.halo.run/v1alpha1/ReasonType
         * @param {ReasonType} [reasonType] Fresh reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotificationHaloRunV1alpha1ReasonType(reasonType?: ReasonType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotificationHaloRunV1alpha1ReasonType(reasonType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.createNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotificationHaloRunV1alpha1ReasonType(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotificationHaloRunV1alpha1ReasonType(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.deleteNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationHaloRunV1alpha1ReasonType(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationHaloRunV1alpha1ReasonType(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.getNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List notification.halo.run/v1alpha1/ReasonType
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNotificationHaloRunV1alpha1ReasonType(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonTypeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNotificationHaloRunV1alpha1ReasonType(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.listNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchNotificationHaloRunV1alpha1ReasonType(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchNotificationHaloRunV1alpha1ReasonType(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.patchNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update notification.halo.run/v1alpha1/ReasonType
         * @param {string} name Name of reasontype
         * @param {ReasonType} [reasonType] Updated reasontype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationHaloRunV1alpha1ReasonType(name: string, reasonType?: ReasonType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReasonType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationHaloRunV1alpha1ReasonType(name, reasonType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationHaloRunV1alpha1ReasonTypeApi.updateNotificationHaloRunV1alpha1ReasonType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationHaloRunV1alpha1ReasonTypeApi - factory interface
 * @export
 */
export const NotificationHaloRunV1alpha1ReasonTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationHaloRunV1alpha1ReasonTypeApiFp(configuration)
    return {
        /**
         * Create notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReasonType> {
            return localVarFp.createNotificationHaloRunV1alpha1ReasonType(requestParameters.reasonType, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteNotificationHaloRunV1alpha1ReasonType(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReasonType> {
            return localVarFp.getNotificationHaloRunV1alpha1ReasonType(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ReasonTypeList> {
            return localVarFp.listNotificationHaloRunV1alpha1ReasonType(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReasonType> {
            return localVarFp.patchNotificationHaloRunV1alpha1ReasonType(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update notification.halo.run/v1alpha1/ReasonType
         * @param {NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReasonType> {
            return localVarFp.updateNotificationHaloRunV1alpha1ReasonType(requestParameters.name, requestParameters.reasonType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Fresh reasontype
     * @type {ReasonType}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonType
     */
    readonly reasonType?: ReasonType
}

/**
 * Request parameters for deleteNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Name of reasontype
     * @type {string}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonType
     */
    readonly name: string
}

/**
 * Request parameters for getNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Name of reasontype
     * @type {string}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonType
     */
    readonly name: string
}

/**
 * Request parameters for listNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonType
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonType
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonType
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonType
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonType
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Name of reasontype
     * @type {string}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonType
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonType
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateNotificationHaloRunV1alpha1ReasonType operation in NotificationHaloRunV1alpha1ReasonTypeApi.
 * @export
 * @interface NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest
 */
export interface NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest {
    /**
     * Name of reasontype
     * @type {string}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonType
     */
    readonly name: string

    /**
     * Updated reasontype
     * @type {ReasonType}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonType
     */
    readonly reasonType?: ReasonType
}

/**
 * NotificationHaloRunV1alpha1ReasonTypeApi - object-oriented interface
 * @export
 * @class NotificationHaloRunV1alpha1ReasonTypeApi
 * @extends {BaseAPI}
 */
export class NotificationHaloRunV1alpha1ReasonTypeApi extends BaseAPI {
    /**
     * Create notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public createNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiCreateNotificationHaloRunV1alpha1ReasonTypeRequest = {}, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).createNotificationHaloRunV1alpha1ReasonType(requestParameters.reasonType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public deleteNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiDeleteNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).deleteNotificationHaloRunV1alpha1ReasonType(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public getNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiGetNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).getNotificationHaloRunV1alpha1ReasonType(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public listNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiListNotificationHaloRunV1alpha1ReasonTypeRequest = {}, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).listNotificationHaloRunV1alpha1ReasonType(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public patchNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiPatchNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).patchNotificationHaloRunV1alpha1ReasonType(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update notification.halo.run/v1alpha1/ReasonType
     * @param {NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationHaloRunV1alpha1ReasonTypeApi
     */
    public updateNotificationHaloRunV1alpha1ReasonType(requestParameters: NotificationHaloRunV1alpha1ReasonTypeApiUpdateNotificationHaloRunV1alpha1ReasonTypeRequest, options?: RawAxiosRequestConfig) {
        return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).updateNotificationHaloRunV1alpha1ReasonType(requestParameters.name, requestParameters.reasonType, options).then((request) => request(this.axios, this.basePath));
    }
}

