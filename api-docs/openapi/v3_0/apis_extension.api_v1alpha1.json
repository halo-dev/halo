{
  "openapi": "3.0.1",
  "info": {
    "title": "Halo",
    "version": "2.17.0-SNAPSHOT"
  },
  "servers": [
    {
      "url": "http://localhost:8091",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "basicAuth": [],
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1alpha1/annotationsettings": {
      "get": {
        "description": "List AnnotationSetting",
        "operationId": "listAnnotationSetting",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationSettingList"
                }
              }
            },
            "description": "Response annotationsettings"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      },
      "post": {
        "description": "Create AnnotationSetting",
        "operationId": "createAnnotationSetting",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationSetting"
              }
            }
          },
          "description": "Fresh annotationsetting"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationSetting"
                }
              }
            },
            "description": "Response annotationsettings created just now"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/annotationsettings/{name}": {
      "delete": {
        "description": "Delete AnnotationSetting",
        "operationId": "deleteAnnotationSetting",
        "parameters": [
          {
            "description": "Name of annotationsetting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response annotationsetting deleted just now"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      },
      "get": {
        "description": "Get AnnotationSetting",
        "operationId": "getAnnotationSetting",
        "parameters": [
          {
            "description": "Name of annotationsetting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationSetting"
                }
              }
            },
            "description": "Response single annotationsetting"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch AnnotationSetting",
        "operationId": "patchAnnotationSetting",
        "parameters": [
          {
            "description": "Name of annotationsetting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationSetting"
                }
              }
            },
            "description": "Response annotationsetting patched just now"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      },
      "put": {
        "description": "Update AnnotationSetting",
        "operationId": "updateAnnotationSetting",
        "parameters": [
          {
            "description": "Name of annotationsetting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationSetting"
              }
            }
          },
          "description": "Updated annotationsetting"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AnnotationSetting"
                }
              }
            },
            "description": "Response annotationsettings updated just now"
          }
        },
        "tags": [
          "AnnotationSettingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/configmaps": {
      "get": {
        "description": "List ConfigMap",
        "operationId": "listConfigMap",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMapList"
                }
              }
            },
            "description": "Response configmaps"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      },
      "post": {
        "description": "Create ConfigMap",
        "operationId": "createConfigMap",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMap"
              }
            }
          },
          "description": "Fresh configmap"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "Response configmaps created just now"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/configmaps/{name}": {
      "delete": {
        "description": "Delete ConfigMap",
        "operationId": "deleteConfigMap",
        "parameters": [
          {
            "description": "Name of configmap",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response configmap deleted just now"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      },
      "get": {
        "description": "Get ConfigMap",
        "operationId": "getConfigMap",
        "parameters": [
          {
            "description": "Name of configmap",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "Response single configmap"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch ConfigMap",
        "operationId": "patchConfigMap",
        "parameters": [
          {
            "description": "Name of configmap",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "Response configmap patched just now"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      },
      "put": {
        "description": "Update ConfigMap",
        "operationId": "updateConfigMap",
        "parameters": [
          {
            "description": "Name of configmap",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMap"
              }
            }
          },
          "description": "Updated configmap"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "Response configmaps updated just now"
          }
        },
        "tags": [
          "ConfigMapV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/menuitems": {
      "get": {
        "description": "List MenuItem",
        "operationId": "listMenuItem",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemList"
                }
              }
            },
            "description": "Response menuitems"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      },
      "post": {
        "description": "Create MenuItem",
        "operationId": "createMenuItem",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            }
          },
          "description": "Fresh menuitem"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": "Response menuitems created just now"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/menuitems/{name}": {
      "delete": {
        "description": "Delete MenuItem",
        "operationId": "deleteMenuItem",
        "parameters": [
          {
            "description": "Name of menuitem",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response menuitem deleted just now"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      },
      "get": {
        "description": "Get MenuItem",
        "operationId": "getMenuItem",
        "parameters": [
          {
            "description": "Name of menuitem",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": "Response single menuitem"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch MenuItem",
        "operationId": "patchMenuItem",
        "parameters": [
          {
            "description": "Name of menuitem",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": "Response menuitem patched just now"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      },
      "put": {
        "description": "Update MenuItem",
        "operationId": "updateMenuItem",
        "parameters": [
          {
            "description": "Name of menuitem",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/MenuItem"
              }
            }
          },
          "description": "Updated menuitem"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItem"
                }
              }
            },
            "description": "Response menuitems updated just now"
          }
        },
        "tags": [
          "MenuItemV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/menus": {
      "get": {
        "description": "List Menu",
        "operationId": "listMenu",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MenuList"
                }
              }
            },
            "description": "Response menus"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      },
      "post": {
        "description": "Create Menu",
        "operationId": "createMenu",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Menu"
              }
            }
          },
          "description": "Fresh menu"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": "Response menus created just now"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/menus/{name}": {
      "delete": {
        "description": "Delete Menu",
        "operationId": "deleteMenu",
        "parameters": [
          {
            "description": "Name of menu",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response menu deleted just now"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      },
      "get": {
        "description": "Get Menu",
        "operationId": "getMenu",
        "parameters": [
          {
            "description": "Name of menu",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": "Response single menu"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Menu",
        "operationId": "patchMenu",
        "parameters": [
          {
            "description": "Name of menu",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": "Response menu patched just now"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      },
      "put": {
        "description": "Update Menu",
        "operationId": "updateMenu",
        "parameters": [
          {
            "description": "Name of menu",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Menu"
              }
            }
          },
          "description": "Updated menu"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            },
            "description": "Response menus updated just now"
          }
        },
        "tags": [
          "MenuV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/rolebindings": {
      "get": {
        "description": "List RoleBinding",
        "operationId": "listRoleBinding",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBindingList"
                }
              }
            },
            "description": "Response rolebindings"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      },
      "post": {
        "description": "Create RoleBinding",
        "operationId": "createRoleBinding",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RoleBinding"
              }
            }
          },
          "description": "Fresh rolebinding"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            },
            "description": "Response rolebindings created just now"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/rolebindings/{name}": {
      "delete": {
        "description": "Delete RoleBinding",
        "operationId": "deleteRoleBinding",
        "parameters": [
          {
            "description": "Name of rolebinding",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response rolebinding deleted just now"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      },
      "get": {
        "description": "Get RoleBinding",
        "operationId": "getRoleBinding",
        "parameters": [
          {
            "description": "Name of rolebinding",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            },
            "description": "Response single rolebinding"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch RoleBinding",
        "operationId": "patchRoleBinding",
        "parameters": [
          {
            "description": "Name of rolebinding",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            },
            "description": "Response rolebinding patched just now"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      },
      "put": {
        "description": "Update RoleBinding",
        "operationId": "updateRoleBinding",
        "parameters": [
          {
            "description": "Name of rolebinding",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RoleBinding"
              }
            }
          },
          "description": "Updated rolebinding"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleBinding"
                }
              }
            },
            "description": "Response rolebindings updated just now"
          }
        },
        "tags": [
          "RoleBindingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/roles": {
      "get": {
        "description": "List Role",
        "operationId": "listRole",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleList"
                }
              }
            },
            "description": "Response roles"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      },
      "post": {
        "description": "Create Role",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "description": "Fresh role"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Response roles created just now"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/roles/{name}": {
      "delete": {
        "description": "Delete Role",
        "operationId": "deleteRole",
        "parameters": [
          {
            "description": "Name of role",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response role deleted just now"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      },
      "get": {
        "description": "Get Role",
        "operationId": "getRole",
        "parameters": [
          {
            "description": "Name of role",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Response single role"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Role",
        "operationId": "patchRole",
        "parameters": [
          {
            "description": "Name of role",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Response role patched just now"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      },
      "put": {
        "description": "Update Role",
        "operationId": "updateRole",
        "parameters": [
          {
            "description": "Name of role",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "description": "Updated role"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "Response roles updated just now"
          }
        },
        "tags": [
          "RoleV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/secrets": {
      "get": {
        "description": "List Secret",
        "operationId": "listSecret",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecretList"
                }
              }
            },
            "description": "Response secrets"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      },
      "post": {
        "description": "Create Secret",
        "operationId": "createSecret",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Secret"
              }
            }
          },
          "description": "Fresh secret"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            },
            "description": "Response secrets created just now"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/secrets/{name}": {
      "delete": {
        "description": "Delete Secret",
        "operationId": "deleteSecret",
        "parameters": [
          {
            "description": "Name of secret",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response secret deleted just now"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      },
      "get": {
        "description": "Get Secret",
        "operationId": "getSecret",
        "parameters": [
          {
            "description": "Name of secret",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            },
            "description": "Response single secret"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Secret",
        "operationId": "patchSecret",
        "parameters": [
          {
            "description": "Name of secret",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            },
            "description": "Response secret patched just now"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      },
      "put": {
        "description": "Update Secret",
        "operationId": "updateSecret",
        "parameters": [
          {
            "description": "Name of secret",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Secret"
              }
            }
          },
          "description": "Updated secret"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Secret"
                }
              }
            },
            "description": "Response secrets updated just now"
          }
        },
        "tags": [
          "SecretV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/settings": {
      "get": {
        "description": "List Setting",
        "operationId": "listSetting",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SettingList"
                }
              }
            },
            "description": "Response settings"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      },
      "post": {
        "description": "Create Setting",
        "operationId": "createSetting",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Setting"
              }
            }
          },
          "description": "Fresh setting"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "Response settings created just now"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/settings/{name}": {
      "delete": {
        "description": "Delete Setting",
        "operationId": "deleteSetting",
        "parameters": [
          {
            "description": "Name of setting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response setting deleted just now"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      },
      "get": {
        "description": "Get Setting",
        "operationId": "getSetting",
        "parameters": [
          {
            "description": "Name of setting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "Response single setting"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Setting",
        "operationId": "patchSetting",
        "parameters": [
          {
            "description": "Name of setting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "Response setting patched just now"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      },
      "put": {
        "description": "Update Setting",
        "operationId": "updateSetting",
        "parameters": [
          {
            "description": "Name of setting",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Setting"
              }
            }
          },
          "description": "Updated setting"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "Response settings updated just now"
          }
        },
        "tags": [
          "SettingV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/users": {
      "get": {
        "description": "List User",
        "operationId": "listUser",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            },
            "description": "Response users"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      },
      "post": {
        "description": "Create User",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Fresh user"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Response users created just now"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      }
    },
    "/api/v1alpha1/users/{name}": {
      "delete": {
        "description": "Delete User",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "Name of user",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response user deleted just now"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      },
      "get": {
        "description": "Get User",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "Name of user",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Response single user"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch User",
        "operationId": "patchUser",
        "parameters": [
          {
            "description": "Name of user",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Response user patched just now"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      },
      "put": {
        "description": "Update User",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "Name of user",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Response users updated just now"
          }
        },
        "tags": [
          "UserV1alpha1"
        ]
      }
    },
    "/apis/auth.halo.run/v1alpha1/authproviders": {
      "get": {
        "description": "List AuthProvider",
        "operationId": "listAuthProvider",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProviderList"
                }
              }
            },
            "description": "Response authproviders"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      },
      "post": {
        "description": "Create AuthProvider",
        "operationId": "createAuthProvider",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AuthProvider"
              }
            }
          },
          "description": "Fresh authprovider"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "Response authproviders created just now"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      }
    },
    "/apis/auth.halo.run/v1alpha1/authproviders/{name}": {
      "delete": {
        "description": "Delete AuthProvider",
        "operationId": "deleteAuthProvider",
        "parameters": [
          {
            "description": "Name of authprovider",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response authprovider deleted just now"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      },
      "get": {
        "description": "Get AuthProvider",
        "operationId": "getAuthProvider",
        "parameters": [
          {
            "description": "Name of authprovider",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "Response single authprovider"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch AuthProvider",
        "operationId": "patchAuthProvider",
        "parameters": [
          {
            "description": "Name of authprovider",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "Response authprovider patched just now"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      },
      "put": {
        "description": "Update AuthProvider",
        "operationId": "updateAuthProvider",
        "parameters": [
          {
            "description": "Name of authprovider",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/AuthProvider"
              }
            }
          },
          "description": "Updated authprovider"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "Response authproviders updated just now"
          }
        },
        "tags": [
          "AuthProviderV1alpha1"
        ]
      }
    },
    "/apis/auth.halo.run/v1alpha1/userconnections": {
      "get": {
        "description": "List UserConnection",
        "operationId": "listUserConnection",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserConnectionList"
                }
              }
            },
            "description": "Response userconnections"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      },
      "post": {
        "description": "Create UserConnection",
        "operationId": "createUserConnection",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserConnection"
              }
            }
          },
          "description": "Fresh userconnection"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserConnection"
                }
              }
            },
            "description": "Response userconnections created just now"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      }
    },
    "/apis/auth.halo.run/v1alpha1/userconnections/{name}": {
      "delete": {
        "description": "Delete UserConnection",
        "operationId": "deleteUserConnection",
        "parameters": [
          {
            "description": "Name of userconnection",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response userconnection deleted just now"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      },
      "get": {
        "description": "Get UserConnection",
        "operationId": "getUserConnection",
        "parameters": [
          {
            "description": "Name of userconnection",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserConnection"
                }
              }
            },
            "description": "Response single userconnection"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch UserConnection",
        "operationId": "patchUserConnection",
        "parameters": [
          {
            "description": "Name of userconnection",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserConnection"
                }
              }
            },
            "description": "Response userconnection patched just now"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      },
      "put": {
        "description": "Update UserConnection",
        "operationId": "updateUserConnection",
        "parameters": [
          {
            "description": "Name of userconnection",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserConnection"
              }
            }
          },
          "description": "Updated userconnection"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserConnection"
                }
              }
            },
            "description": "Response userconnections updated just now"
          }
        },
        "tags": [
          "UserConnectionV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/categories": {
      "get": {
        "description": "List Category",
        "operationId": "listCategory",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryList"
                }
              }
            },
            "description": "Response categories"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      },
      "post": {
        "description": "Create Category",
        "operationId": "createCategory",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "description": "Fresh category"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "Response categories created just now"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/categories/{name}": {
      "delete": {
        "description": "Delete Category",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "description": "Name of category",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response category deleted just now"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      },
      "get": {
        "description": "Get Category",
        "operationId": "getCategory",
        "parameters": [
          {
            "description": "Name of category",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "Response single category"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Category",
        "operationId": "patchCategory",
        "parameters": [
          {
            "description": "Name of category",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "Response category patched just now"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      },
      "put": {
        "description": "Update Category",
        "operationId": "updateCategory",
        "parameters": [
          {
            "description": "Name of category",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "description": "Updated category"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            },
            "description": "Response categories updated just now"
          }
        },
        "tags": [
          "CategoryV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/comments": {
      "get": {
        "description": "List Comment",
        "operationId": "listComment",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CommentList"
                }
              }
            },
            "description": "Response comments"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      },
      "post": {
        "description": "Create Comment",
        "operationId": "createComment",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "description": "Fresh comment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": "Response comments created just now"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/comments/{name}": {
      "delete": {
        "description": "Delete Comment",
        "operationId": "deleteComment",
        "parameters": [
          {
            "description": "Name of comment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response comment deleted just now"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      },
      "get": {
        "description": "Get Comment",
        "operationId": "getComment",
        "parameters": [
          {
            "description": "Name of comment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": "Response single comment"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Comment",
        "operationId": "patchComment",
        "parameters": [
          {
            "description": "Name of comment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": "Response comment patched just now"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      },
      "put": {
        "description": "Update Comment",
        "operationId": "updateComment",
        "parameters": [
          {
            "description": "Name of comment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "description": "Updated comment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": "Response comments updated just now"
          }
        },
        "tags": [
          "CommentV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/posts": {
      "get": {
        "description": "List Post",
        "operationId": "listPost",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostList"
                }
              }
            },
            "description": "Response posts"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      },
      "post": {
        "description": "Create Post",
        "operationId": "createPost",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          },
          "description": "Fresh post"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "Response posts created just now"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/posts/{name}": {
      "delete": {
        "description": "Delete Post",
        "operationId": "deletePost",
        "parameters": [
          {
            "description": "Name of post",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response post deleted just now"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      },
      "get": {
        "description": "Get Post",
        "operationId": "getPost",
        "parameters": [
          {
            "description": "Name of post",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "Response single post"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Post",
        "operationId": "patchPost",
        "parameters": [
          {
            "description": "Name of post",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "Response post patched just now"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      },
      "put": {
        "description": "Update Post",
        "operationId": "updatePost",
        "parameters": [
          {
            "description": "Name of post",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          },
          "description": "Updated post"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "Response posts updated just now"
          }
        },
        "tags": [
          "PostV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/replies": {
      "get": {
        "description": "List Reply",
        "operationId": "listReply",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyList"
                }
              }
            },
            "description": "Response replies"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      },
      "post": {
        "description": "Create Reply",
        "operationId": "createReply",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Reply"
              }
            }
          },
          "description": "Fresh reply"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            },
            "description": "Response replies created just now"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/replies/{name}": {
      "delete": {
        "description": "Delete Reply",
        "operationId": "deleteReply",
        "parameters": [
          {
            "description": "Name of reply",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response reply deleted just now"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      },
      "get": {
        "description": "Get Reply",
        "operationId": "getReply",
        "parameters": [
          {
            "description": "Name of reply",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            },
            "description": "Response single reply"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Reply",
        "operationId": "patchReply",
        "parameters": [
          {
            "description": "Name of reply",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            },
            "description": "Response reply patched just now"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      },
      "put": {
        "description": "Update Reply",
        "operationId": "updateReply",
        "parameters": [
          {
            "description": "Name of reply",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Reply"
              }
            }
          },
          "description": "Updated reply"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            },
            "description": "Response replies updated just now"
          }
        },
        "tags": [
          "ReplyV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/singlepages": {
      "get": {
        "description": "List SinglePage",
        "operationId": "listSinglePage",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePageList"
                }
              }
            },
            "description": "Response singlepages"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      },
      "post": {
        "description": "Create SinglePage",
        "operationId": "createSinglePage",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SinglePage"
              }
            }
          },
          "description": "Fresh singlepage"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "Response singlepages created just now"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/singlepages/{name}": {
      "delete": {
        "description": "Delete SinglePage",
        "operationId": "deleteSinglePage",
        "parameters": [
          {
            "description": "Name of singlepage",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response singlepage deleted just now"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      },
      "get": {
        "description": "Get SinglePage",
        "operationId": "getSinglePage",
        "parameters": [
          {
            "description": "Name of singlepage",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "Response single singlepage"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch SinglePage",
        "operationId": "patchSinglePage",
        "parameters": [
          {
            "description": "Name of singlepage",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "Response singlepage patched just now"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      },
      "put": {
        "description": "Update SinglePage",
        "operationId": "updateSinglePage",
        "parameters": [
          {
            "description": "Name of singlepage",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SinglePage"
              }
            }
          },
          "description": "Updated singlepage"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "Response singlepages updated just now"
          }
        },
        "tags": [
          "SinglePageV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/snapshots": {
      "get": {
        "description": "List Snapshot",
        "operationId": "listSnapshot",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotList"
                }
              }
            },
            "description": "Response snapshots"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      },
      "post": {
        "description": "Create Snapshot",
        "operationId": "createSnapshot",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Snapshot"
              }
            }
          },
          "description": "Fresh snapshot"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Response snapshots created just now"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/snapshots/{name}": {
      "delete": {
        "description": "Delete Snapshot",
        "operationId": "deleteSnapshot",
        "parameters": [
          {
            "description": "Name of snapshot",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response snapshot deleted just now"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      },
      "get": {
        "description": "Get Snapshot",
        "operationId": "getSnapshot",
        "parameters": [
          {
            "description": "Name of snapshot",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Response single snapshot"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Snapshot",
        "operationId": "patchSnapshot",
        "parameters": [
          {
            "description": "Name of snapshot",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Response snapshot patched just now"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      },
      "put": {
        "description": "Update Snapshot",
        "operationId": "updateSnapshot",
        "parameters": [
          {
            "description": "Name of snapshot",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Snapshot"
              }
            }
          },
          "description": "Updated snapshot"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            },
            "description": "Response snapshots updated just now"
          }
        },
        "tags": [
          "SnapshotV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/tags": {
      "get": {
        "description": "List Tag",
        "operationId": "listTag",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            },
            "description": "Response tags"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      },
      "post": {
        "description": "Create Tag",
        "operationId": "createTag",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "description": "Fresh tag"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Response tags created just now"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      }
    },
    "/apis/content.halo.run/v1alpha1/tags/{name}": {
      "delete": {
        "description": "Delete Tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "description": "Name of tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response tag deleted just now"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      },
      "get": {
        "description": "Get Tag",
        "operationId": "getTag",
        "parameters": [
          {
            "description": "Name of tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Response single tag"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Tag",
        "operationId": "patchTag",
        "parameters": [
          {
            "description": "Name of tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Response tag patched just now"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      },
      "put": {
        "description": "Update Tag",
        "operationId": "updateTag",
        "parameters": [
          {
            "description": "Name of tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          },
          "description": "Updated tag"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            },
            "description": "Response tags updated just now"
          }
        },
        "tags": [
          "TagV1alpha1"
        ]
      }
    },
    "/apis/metrics.halo.run/v1alpha1/counters": {
      "get": {
        "description": "List Counter",
        "operationId": "listCounter",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CounterList"
                }
              }
            },
            "description": "Response counters"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      },
      "post": {
        "description": "Create Counter",
        "operationId": "createCounter",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Counter"
              }
            }
          },
          "description": "Fresh counter"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": "Response counters created just now"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      }
    },
    "/apis/metrics.halo.run/v1alpha1/counters/{name}": {
      "delete": {
        "description": "Delete Counter",
        "operationId": "deleteCounter",
        "parameters": [
          {
            "description": "Name of counter",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response counter deleted just now"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      },
      "get": {
        "description": "Get Counter",
        "operationId": "getCounter",
        "parameters": [
          {
            "description": "Name of counter",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": "Response single counter"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Counter",
        "operationId": "patchCounter",
        "parameters": [
          {
            "description": "Name of counter",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": "Response counter patched just now"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      },
      "put": {
        "description": "Update Counter",
        "operationId": "updateCounter",
        "parameters": [
          {
            "description": "Name of counter",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Counter"
              }
            }
          },
          "description": "Updated counter"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Counter"
                }
              }
            },
            "description": "Response counters updated just now"
          }
        },
        "tags": [
          "CounterV1alpha1"
        ]
      }
    },
    "/apis/migration.halo.run/v1alpha1/backups": {
      "get": {
        "description": "List Backup",
        "operationId": "listBackup",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BackupList"
                }
              }
            },
            "description": "Response backups"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      },
      "post": {
        "description": "Create Backup",
        "operationId": "createBackup",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Backup"
              }
            }
          },
          "description": "Fresh backup"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Response backups created just now"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      }
    },
    "/apis/migration.halo.run/v1alpha1/backups/{name}": {
      "delete": {
        "description": "Delete Backup",
        "operationId": "deleteBackup",
        "parameters": [
          {
            "description": "Name of backup",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response backup deleted just now"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      },
      "get": {
        "description": "Get Backup",
        "operationId": "getBackup",
        "parameters": [
          {
            "description": "Name of backup",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Response single backup"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Backup",
        "operationId": "patchBackup",
        "parameters": [
          {
            "description": "Name of backup",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Response backup patched just now"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      },
      "put": {
        "description": "Update Backup",
        "operationId": "updateBackup",
        "parameters": [
          {
            "description": "Name of backup",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Backup"
              }
            }
          },
          "description": "Updated backup"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Backup"
                }
              }
            },
            "description": "Response backups updated just now"
          }
        },
        "tags": [
          "BackupV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/extensiondefinitions": {
      "get": {
        "description": "List ExtensionDefinition",
        "operationId": "listExtensionDefinition",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionDefinitionList"
                }
              }
            },
            "description": "Response extensiondefinitions"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      },
      "post": {
        "description": "Create ExtensionDefinition",
        "operationId": "createExtensionDefinition",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionDefinition"
              }
            }
          },
          "description": "Fresh extensiondefinition"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionDefinition"
                }
              }
            },
            "description": "Response extensiondefinitions created just now"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/extensiondefinitions/{name}": {
      "delete": {
        "description": "Delete ExtensionDefinition",
        "operationId": "deleteExtensionDefinition",
        "parameters": [
          {
            "description": "Name of extensiondefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response extensiondefinition deleted just now"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      },
      "get": {
        "description": "Get ExtensionDefinition",
        "operationId": "getExtensionDefinition",
        "parameters": [
          {
            "description": "Name of extensiondefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionDefinition"
                }
              }
            },
            "description": "Response single extensiondefinition"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch ExtensionDefinition",
        "operationId": "patchExtensionDefinition",
        "parameters": [
          {
            "description": "Name of extensiondefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionDefinition"
                }
              }
            },
            "description": "Response extensiondefinition patched just now"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      },
      "put": {
        "description": "Update ExtensionDefinition",
        "operationId": "updateExtensionDefinition",
        "parameters": [
          {
            "description": "Name of extensiondefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionDefinition"
              }
            }
          },
          "description": "Updated extensiondefinition"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionDefinition"
                }
              }
            },
            "description": "Response extensiondefinitions updated just now"
          }
        },
        "tags": [
          "ExtensionDefinitionV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions": {
      "get": {
        "description": "List ExtensionPointDefinition",
        "operationId": "listExtensionPointDefinition",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionPointDefinitionList"
                }
              }
            },
            "description": "Response extensionpointdefinitions"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      },
      "post": {
        "description": "Create ExtensionPointDefinition",
        "operationId": "createExtensionPointDefinition",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionPointDefinition"
              }
            }
          },
          "description": "Fresh extensionpointdefinition"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionPointDefinition"
                }
              }
            },
            "description": "Response extensionpointdefinitions created just now"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}": {
      "delete": {
        "description": "Delete ExtensionPointDefinition",
        "operationId": "deleteExtensionPointDefinition",
        "parameters": [
          {
            "description": "Name of extensionpointdefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response extensionpointdefinition deleted just now"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      },
      "get": {
        "description": "Get ExtensionPointDefinition",
        "operationId": "getExtensionPointDefinition",
        "parameters": [
          {
            "description": "Name of extensionpointdefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionPointDefinition"
                }
              }
            },
            "description": "Response single extensionpointdefinition"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch ExtensionPointDefinition",
        "operationId": "patchExtensionPointDefinition",
        "parameters": [
          {
            "description": "Name of extensionpointdefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionPointDefinition"
                }
              }
            },
            "description": "Response extensionpointdefinition patched just now"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      },
      "put": {
        "description": "Update ExtensionPointDefinition",
        "operationId": "updateExtensionPointDefinition",
        "parameters": [
          {
            "description": "Name of extensionpointdefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionPointDefinition"
              }
            }
          },
          "description": "Updated extensionpointdefinition"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionPointDefinition"
                }
              }
            },
            "description": "Response extensionpointdefinitions updated just now"
          }
        },
        "tags": [
          "ExtensionPointDefinitionV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/plugins": {
      "get": {
        "description": "List Plugin",
        "operationId": "listPlugin",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PluginList"
                }
              }
            },
            "description": "Response plugins"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      },
      "post": {
        "description": "Create Plugin",
        "operationId": "createPlugin",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            }
          },
          "description": "Fresh plugin"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Response plugins created just now"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/plugins/{name}": {
      "delete": {
        "description": "Delete Plugin",
        "operationId": "deletePlugin",
        "parameters": [
          {
            "description": "Name of plugin",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response plugin deleted just now"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      },
      "get": {
        "description": "Get Plugin",
        "operationId": "getPlugin",
        "parameters": [
          {
            "description": "Name of plugin",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Response single plugin"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Plugin",
        "operationId": "patchPlugin",
        "parameters": [
          {
            "description": "Name of plugin",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Response plugin patched just now"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      },
      "put": {
        "description": "Update Plugin",
        "operationId": "updatePlugin",
        "parameters": [
          {
            "description": "Name of plugin",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            }
          },
          "description": "Updated plugin"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "Response plugins updated just now"
          }
        },
        "tags": [
          "PluginV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/reverseproxies": {
      "get": {
        "description": "List ReverseProxy",
        "operationId": "listReverseProxy",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseProxyList"
                }
              }
            },
            "description": "Response reverseproxies"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      },
      "post": {
        "description": "Create ReverseProxy",
        "operationId": "createReverseProxy",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReverseProxy"
              }
            }
          },
          "description": "Fresh reverseproxy"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseProxy"
                }
              }
            },
            "description": "Response reverseproxies created just now"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}": {
      "delete": {
        "description": "Delete ReverseProxy",
        "operationId": "deleteReverseProxy",
        "parameters": [
          {
            "description": "Name of reverseproxy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response reverseproxy deleted just now"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      },
      "get": {
        "description": "Get ReverseProxy",
        "operationId": "getReverseProxy",
        "parameters": [
          {
            "description": "Name of reverseproxy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseProxy"
                }
              }
            },
            "description": "Response single reverseproxy"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch ReverseProxy",
        "operationId": "patchReverseProxy",
        "parameters": [
          {
            "description": "Name of reverseproxy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseProxy"
                }
              }
            },
            "description": "Response reverseproxy patched just now"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      },
      "put": {
        "description": "Update ReverseProxy",
        "operationId": "updateReverseProxy",
        "parameters": [
          {
            "description": "Name of reverseproxy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ReverseProxy"
              }
            }
          },
          "description": "Updated reverseproxy"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseProxy"
                }
              }
            },
            "description": "Response reverseproxies updated just now"
          }
        },
        "tags": [
          "ReverseProxyV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/searchengines": {
      "get": {
        "description": "List SearchEngine",
        "operationId": "listSearchEngine",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchEngineList"
                }
              }
            },
            "description": "Response searchengines"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      },
      "post": {
        "description": "Create SearchEngine",
        "operationId": "createSearchEngine",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SearchEngine"
              }
            }
          },
          "description": "Fresh searchengine"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchEngine"
                }
              }
            },
            "description": "Response searchengines created just now"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      }
    },
    "/apis/plugin.halo.run/v1alpha1/searchengines/{name}": {
      "delete": {
        "description": "Delete SearchEngine",
        "operationId": "deleteSearchEngine",
        "parameters": [
          {
            "description": "Name of searchengine",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response searchengine deleted just now"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      },
      "get": {
        "description": "Get SearchEngine",
        "operationId": "getSearchEngine",
        "parameters": [
          {
            "description": "Name of searchengine",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchEngine"
                }
              }
            },
            "description": "Response single searchengine"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch SearchEngine",
        "operationId": "patchSearchEngine",
        "parameters": [
          {
            "description": "Name of searchengine",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchEngine"
                }
              }
            },
            "description": "Response searchengine patched just now"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      },
      "put": {
        "description": "Update SearchEngine",
        "operationId": "updateSearchEngine",
        "parameters": [
          {
            "description": "Name of searchengine",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SearchEngine"
              }
            }
          },
          "description": "Updated searchengine"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SearchEngine"
                }
              }
            },
            "description": "Response searchengines updated just now"
          }
        },
        "tags": [
          "SearchEngineV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/devices": {
      "get": {
        "description": "List Device",
        "operationId": "listDevice",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceList"
                }
              }
            },
            "description": "Response devices"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      },
      "post": {
        "description": "Create Device",
        "operationId": "createDevice",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "description": "Fresh device"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Response devices created just now"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/devices/{name}": {
      "delete": {
        "description": "Delete Device",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "description": "Name of device",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response device deleted just now"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      },
      "get": {
        "description": "Get Device",
        "operationId": "getDevice",
        "parameters": [
          {
            "description": "Name of device",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Response single device"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Device",
        "operationId": "patchDevice",
        "parameters": [
          {
            "description": "Name of device",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Response device patched just now"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      },
      "put": {
        "description": "Update Device",
        "operationId": "updateDevice",
        "parameters": [
          {
            "description": "Name of device",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          },
          "description": "Updated device"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            },
            "description": "Response devices updated just now"
          }
        },
        "tags": [
          "DeviceV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/personalaccesstokens": {
      "get": {
        "description": "List PersonalAccessToken",
        "operationId": "listPersonalAccessToken",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessTokenList"
                }
              }
            },
            "description": "Response personalaccesstokens"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      },
      "post": {
        "description": "Create PersonalAccessToken",
        "operationId": "createPersonalAccessToken",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccessToken"
              }
            }
          },
          "description": "Fresh personalaccesstoken"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            },
            "description": "Response personalaccesstokens created just now"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}": {
      "delete": {
        "description": "Delete PersonalAccessToken",
        "operationId": "deletePersonalAccessToken",
        "parameters": [
          {
            "description": "Name of personalaccesstoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response personalaccesstoken deleted just now"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      },
      "get": {
        "description": "Get PersonalAccessToken",
        "operationId": "getPersonalAccessToken",
        "parameters": [
          {
            "description": "Name of personalaccesstoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            },
            "description": "Response single personalaccesstoken"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch PersonalAccessToken",
        "operationId": "patchPersonalAccessToken",
        "parameters": [
          {
            "description": "Name of personalaccesstoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            },
            "description": "Response personalaccesstoken patched just now"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      },
      "put": {
        "description": "Update PersonalAccessToken",
        "operationId": "updatePersonalAccessToken",
        "parameters": [
          {
            "description": "Name of personalaccesstoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccessToken"
              }
            }
          },
          "description": "Updated personalaccesstoken"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            },
            "description": "Response personalaccesstokens updated just now"
          }
        },
        "tags": [
          "PersonalAccessTokenV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/remembermetokens": {
      "get": {
        "description": "List RememberMeToken",
        "operationId": "listRememberMeToken",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RememberMeTokenList"
                }
              }
            },
            "description": "Response remembermetokens"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      },
      "post": {
        "description": "Create RememberMeToken",
        "operationId": "createRememberMeToken",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RememberMeToken"
              }
            }
          },
          "description": "Fresh remembermetoken"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RememberMeToken"
                }
              }
            },
            "description": "Response remembermetokens created just now"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      }
    },
    "/apis/security.halo.run/v1alpha1/remembermetokens/{name}": {
      "delete": {
        "description": "Delete RememberMeToken",
        "operationId": "deleteRememberMeToken",
        "parameters": [
          {
            "description": "Name of remembermetoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response remembermetoken deleted just now"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      },
      "get": {
        "description": "Get RememberMeToken",
        "operationId": "getRememberMeToken",
        "parameters": [
          {
            "description": "Name of remembermetoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RememberMeToken"
                }
              }
            },
            "description": "Response single remembermetoken"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch RememberMeToken",
        "operationId": "patchRememberMeToken",
        "parameters": [
          {
            "description": "Name of remembermetoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RememberMeToken"
                }
              }
            },
            "description": "Response remembermetoken patched just now"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      },
      "put": {
        "description": "Update RememberMeToken",
        "operationId": "updateRememberMeToken",
        "parameters": [
          {
            "description": "Name of remembermetoken",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/RememberMeToken"
              }
            }
          },
          "description": "Updated remembermetoken"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RememberMeToken"
                }
              }
            },
            "description": "Response remembermetokens updated just now"
          }
        },
        "tags": [
          "RememberMeTokenV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/attachments": {
      "get": {
        "description": "List Attachment",
        "operationId": "listAttachment",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentList"
                }
              }
            },
            "description": "Response attachments"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      },
      "post": {
        "description": "Create Attachment",
        "operationId": "createAttachment",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "description": "Fresh attachment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "Response attachments created just now"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/attachments/{name}": {
      "delete": {
        "description": "Delete Attachment",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "description": "Name of attachment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response attachment deleted just now"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      },
      "get": {
        "description": "Get Attachment",
        "operationId": "getAttachment",
        "parameters": [
          {
            "description": "Name of attachment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "Response single attachment"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Attachment",
        "operationId": "patchAttachment",
        "parameters": [
          {
            "description": "Name of attachment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "Response attachment patched just now"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      },
      "put": {
        "description": "Update Attachment",
        "operationId": "updateAttachment",
        "parameters": [
          {
            "description": "Name of attachment",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          },
          "description": "Updated attachment"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "Response attachments updated just now"
          }
        },
        "tags": [
          "AttachmentV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/groups": {
      "get": {
        "description": "List Group",
        "operationId": "listGroup",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupList"
                }
              }
            },
            "description": "Response groups"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      },
      "post": {
        "description": "Create Group",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "description": "Fresh group"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Response groups created just now"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/groups/{name}": {
      "delete": {
        "description": "Delete Group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "description": "Name of group",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response group deleted just now"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      },
      "get": {
        "description": "Get Group",
        "operationId": "getGroup",
        "parameters": [
          {
            "description": "Name of group",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Response single group"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Group",
        "operationId": "patchGroup",
        "parameters": [
          {
            "description": "Name of group",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Response group patched just now"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      },
      "put": {
        "description": "Update Group",
        "operationId": "updateGroup",
        "parameters": [
          {
            "description": "Name of group",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          },
          "description": "Updated group"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Response groups updated just now"
          }
        },
        "tags": [
          "GroupV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/policies": {
      "get": {
        "description": "List Policy",
        "operationId": "listPolicy",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyList"
                }
              }
            },
            "description": "Response policies"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      },
      "post": {
        "description": "Create Policy",
        "operationId": "createPolicy",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "description": "Fresh policy"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Response policies created just now"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/policies/{name}": {
      "delete": {
        "description": "Delete Policy",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "description": "Name of policy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response policy deleted just now"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      },
      "get": {
        "description": "Get Policy",
        "operationId": "getPolicy",
        "parameters": [
          {
            "description": "Name of policy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Response single policy"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Policy",
        "operationId": "patchPolicy",
        "parameters": [
          {
            "description": "Name of policy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Response policy patched just now"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      },
      "put": {
        "description": "Update Policy",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "description": "Name of policy",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "description": "Updated policy"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Response policies updated just now"
          }
        },
        "tags": [
          "PolicyV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/policytemplates": {
      "get": {
        "description": "List PolicyTemplate",
        "operationId": "listPolicyTemplate",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplateList"
                }
              }
            },
            "description": "Response policytemplates"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      },
      "post": {
        "description": "Create PolicyTemplate",
        "operationId": "createPolicyTemplate",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PolicyTemplate"
              }
            }
          },
          "description": "Fresh policytemplate"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplate"
                }
              }
            },
            "description": "Response policytemplates created just now"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      }
    },
    "/apis/storage.halo.run/v1alpha1/policytemplates/{name}": {
      "delete": {
        "description": "Delete PolicyTemplate",
        "operationId": "deletePolicyTemplate",
        "parameters": [
          {
            "description": "Name of policytemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response policytemplate deleted just now"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      },
      "get": {
        "description": "Get PolicyTemplate",
        "operationId": "getPolicyTemplate",
        "parameters": [
          {
            "description": "Name of policytemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplate"
                }
              }
            },
            "description": "Response single policytemplate"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch PolicyTemplate",
        "operationId": "patchPolicyTemplate",
        "parameters": [
          {
            "description": "Name of policytemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplate"
                }
              }
            },
            "description": "Response policytemplate patched just now"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      },
      "put": {
        "description": "Update PolicyTemplate",
        "operationId": "updatePolicyTemplate",
        "parameters": [
          {
            "description": "Name of policytemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PolicyTemplate"
              }
            }
          },
          "description": "Updated policytemplate"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyTemplate"
                }
              }
            },
            "description": "Response policytemplates updated just now"
          }
        },
        "tags": [
          "PolicyTemplateV1alpha1"
        ]
      }
    },
    "/apis/theme.halo.run/v1alpha1/themes": {
      "get": {
        "description": "List Theme",
        "operationId": "listTheme",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeList"
                }
              }
            },
            "description": "Response themes"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      },
      "post": {
        "description": "Create Theme",
        "operationId": "createTheme",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Theme"
              }
            }
          },
          "description": "Fresh theme"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "Response themes created just now"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      }
    },
    "/apis/theme.halo.run/v1alpha1/themes/{name}": {
      "delete": {
        "description": "Delete Theme",
        "operationId": "deleteTheme",
        "parameters": [
          {
            "description": "Name of theme",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response theme deleted just now"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      },
      "get": {
        "description": "Get Theme",
        "operationId": "getTheme",
        "parameters": [
          {
            "description": "Name of theme",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "Response single theme"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      },
      "patch": {
        "description": "Patch Theme",
        "operationId": "patchTheme",
        "parameters": [
          {
            "description": "Name of theme",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "Response theme patched just now"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      },
      "put": {
        "description": "Update Theme",
        "operationId": "updateTheme",
        "parameters": [
          {
            "description": "Name of theme",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Theme"
              }
            }
          },
          "description": "Updated theme"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "Response themes updated just now"
          }
        },
        "tags": [
          "ThemeV1alpha1"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "AnnotationSetting": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/AnnotationSettingSpec"
          }
        }
      },
      "AnnotationSettingList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/AnnotationSetting"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "AnnotationSettingSpec": {
        "required": [
          "formSchema",
          "targetRef"
        ],
        "type": "object",
        "properties": {
          "formSchema": {
            "minLength": 1,
            "type": "array",
            "items": {
              "minLength": 1,
              "type": "object"
            }
          },
          "targetRef": {
            "$ref": "#/components/schemas/GroupKind"
          }
        }
      },
      "Attachment": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/AttachmentSpec"
          },
          "status": {
            "$ref": "#/components/schemas/AttachmentStatus"
          }
        }
      },
      "AttachmentList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "AttachmentSpec": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of attachment"
          },
          "groupName": {
            "type": "string",
            "description": "Group name"
          },
          "mediaType": {
            "type": "string",
            "description": "Media type of attachment"
          },
          "ownerName": {
            "type": "string",
            "description": "Name of User who uploads the attachment"
          },
          "policyName": {
            "type": "string",
            "description": "Policy name"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "Size of attachment. Unit is Byte",
            "format": "int64"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "Tags of attachment",
            "items": {
              "type": "string",
              "description": "Tag name"
            }
          }
        }
      },
      "AttachmentStatus": {
        "type": "object",
        "properties": {
          "permalink": {
            "type": "string",
            "description": "Permalink of attachment.\nIf it is in local storage, the public URL will be set.\nIf it is in s3 storage, the Object URL will be set.\n"
          }
        }
      },
      "AuthProvider": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/AuthProviderSpec"
          }
        }
      },
      "AuthProviderList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/AuthProvider"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "AuthProviderSpec": {
        "required": [
          "authenticationUrl",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "authenticationUrl": {
            "type": "string",
            "description": "Authentication url of the auth provider"
          },
          "bindingUrl": {
            "type": "string"
          },
          "configMapRef": {
            "$ref": "#/components/schemas/ConfigMapRef"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the auth provider"
          },
          "helpPage": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "settingRef": {
            "$ref": "#/components/schemas/SettingRef"
          },
          "unbindUrl": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Author": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Backup": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/BackupSpec"
          },
          "status": {
            "$ref": "#/components/schemas/BackupStatus"
          }
        }
      },
      "BackupList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Backup"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "BackupSpec": {
        "type": "object",
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "format": {
            "type": "string",
            "description": "Backup file format. Currently, only zip format is supported."
          }
        }
      },
      "BackupStatus": {
        "type": "object",
        "properties": {
          "completionTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "failureMessage": {
            "type": "string"
          },
          "failureReason": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "phase": {
            "type": "string",
            "enum": [
              "PENDING",
              "RUNNING",
              "SUCCEEDED",
              "FAILED"
            ]
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "startTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Category": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/CategorySpec"
          },
          "status": {
            "$ref": "#/components/schemas/CategoryStatus"
          }
        }
      },
      "CategoryList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "CategorySpec": {
        "required": [
          "displayName",
          "priority",
          "slug"
        ],
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cover": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean"
          },
          "postTemplate": {
            "maxLength": 255,
            "type": "string"
          },
          "preventParentPostCascadeQuery": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "template": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "CategoryStatus": {
        "type": "object",
        "properties": {
          "permalink": {
            "type": "string"
          },
          "postCount": {
            "type": "integer",
            "format": "int32"
          },
          "visiblePostCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Comment": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/CommentSpec"
          },
          "status": {
            "$ref": "#/components/schemas/CommentStatus"
          }
        }
      },
      "CommentList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "CommentOwner": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "displayName": {
            "type": "string"
          },
          "kind": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "CommentSpec": {
        "required": [
          "allowNotification",
          "approved",
          "content",
          "hidden",
          "owner",
          "priority",
          "raw",
          "subjectRef",
          "top"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": true
          },
          "approved": {
            "type": "boolean",
            "default": false
          },
          "approvedTime": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "ipAddress": {
            "type": "string"
          },
          "lastReadTime": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentOwner"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          },
          "subjectRef": {
            "$ref": "#/components/schemas/Ref"
          },
          "top": {
            "type": "boolean",
            "default": false
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "CommentStatus": {
        "type": "object",
        "properties": {
          "hasNewReply": {
            "type": "boolean"
          },
          "lastReplyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "replyCount": {
            "type": "integer",
            "format": "int32"
          },
          "unreadReplyCount": {
            "type": "integer",
            "format": "int32"
          },
          "visibleReplyCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Condition": {
        "required": [
          "lastTransitionTime",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "lastTransitionTime": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "maxLength": 32768,
            "type": "string"
          },
          "reason": {
            "maxLength": 1024,
            "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "TRUE",
              "FALSE",
              "UNKNOWN"
            ]
          },
          "type": {
            "maxLength": 316,
            "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
            "type": "string"
          }
        }
      },
      "ConfigMap": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ConfigMapList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ConfigMap"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ConfigMapRef": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "CopyOperation": {
        "required": [
          "op",
          "from",
          "path"
        ],
        "type": "object",
        "properties": {
          "from": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "op": {
            "type": "string",
            "enum": [
              "copy"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "Counter": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "approvedComment": {
            "type": "integer",
            "format": "int32"
          },
          "downvote": {
            "type": "integer",
            "format": "int32"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "totalComment": {
            "type": "integer",
            "format": "int32"
          },
          "upvote": {
            "type": "integer",
            "format": "int32"
          },
          "visit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CounterList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Counter"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "CustomTemplates": {
        "type": "object",
        "properties": {
          "category": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          },
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          },
          "post": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          }
        }
      },
      "Device": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec",
          "status"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/DeviceSpec"
          },
          "status": {
            "$ref": "#/components/schemas/DeviceStatus"
          }
        }
      },
      "DeviceList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "DeviceSpec": {
        "required": [
          "ipAddress",
          "principalName",
          "sessionId"
        ],
        "type": "object",
        "properties": {
          "ipAddress": {
            "maxLength": 129,
            "type": "string"
          },
          "lastAccessedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastAuthenticatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "principalName": {
            "minLength": 1,
            "type": "string"
          },
          "rememberMeSeriesId": {
            "type": "string"
          },
          "sessionId": {
            "minLength": 1,
            "type": "string"
          },
          "userAgent": {
            "maxLength": 500,
            "type": "string"
          }
        }
      },
      "DeviceStatus": {
        "type": "object",
        "properties": {
          "browser": {
            "type": "string"
          },
          "os": {
            "type": "string"
          }
        }
      },
      "Excerpt": {
        "required": [
          "autoGenerate"
        ],
        "type": "object",
        "properties": {
          "autoGenerate": {
            "type": "boolean",
            "default": true
          },
          "raw": {
            "type": "string"
          }
        }
      },
      "ExtensionDefinition": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ExtensionSpec"
          }
        }
      },
      "ExtensionDefinitionList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ExtensionDefinition"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ExtensionPointDefinition": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ExtensionPointSpec"
          }
        }
      },
      "ExtensionPointDefinitionList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ExtensionPointDefinition"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ExtensionPointSpec": {
        "required": [
          "className",
          "displayName",
          "type"
        ],
        "type": "object",
        "properties": {
          "className": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "SINGLETON",
              "MULTI_INSTANCE"
            ]
          }
        }
      },
      "ExtensionSpec": {
        "required": [
          "className",
          "displayName",
          "extensionPointName"
        ],
        "type": "object",
        "properties": {
          "className": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "extensionPointName": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        }
      },
      "FileReverseProxyProvider": {
        "type": "object",
        "properties": {
          "directory": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        }
      },
      "Group": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/GroupSpec"
          },
          "status": {
            "$ref": "#/components/schemas/GroupStatus"
          }
        }
      },
      "GroupKind": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "GroupList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "GroupSpec": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of group"
          }
        }
      },
      "GroupStatus": {
        "type": "object",
        "properties": {
          "totalAttachments": {
            "minimum": 0,
            "type": "integer",
            "description": "Total of attachments under the current group",
            "format": "int64"
          },
          "updateTimestamp": {
            "type": "string",
            "description": "Update timestamp of the group",
            "format": "date-time"
          }
        }
      },
      "JsonPatch": {
        "minItems": 1,
        "uniqueItems": true,
        "type": "array",
        "description": "JSON schema for JSONPatch operations",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/AddOperation"
            },
            {
              "$ref": "#/components/schemas/ReplaceOperation"
            },
            {
              "$ref": "#/components/schemas/TestOperation"
            },
            {
              "$ref": "#/components/schemas/RemoveOperation"
            },
            {
              "$ref": "#/components/schemas/MoveOperation"
            },
            {
              "$ref": "#/components/schemas/CopyOperation"
            }
          ]
        }
      },
      "License": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "LoginHistory": {
        "required": [
          "loginAt",
          "sourceIp",
          "successful",
          "userAgent"
        ],
        "type": "object",
        "properties": {
          "loginAt": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string"
          },
          "sourceIp": {
            "type": "string"
          },
          "successful": {
            "type": "boolean"
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "Menu": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/MenuSpec"
          }
        }
      },
      "MenuItem": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/MenuItemSpec"
          },
          "status": {
            "$ref": "#/components/schemas/MenuItemStatus"
          }
        }
      },
      "MenuItemList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/MenuItem"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "MenuItemSpec": {
        "type": "object",
        "properties": {
          "children": {
            "uniqueItems": true,
            "type": "array",
            "description": "Children of this menu item",
            "items": {
              "type": "string",
              "description": "The name of menu item child"
            }
          },
          "displayName": {
            "type": "string",
            "description": "The display name of menu item."
          },
          "href": {
            "type": "string",
            "description": "The href of this menu item."
          },
          "priority": {
            "type": "integer",
            "description": "The priority is for ordering.",
            "format": "int32"
          },
          "target": {
            "type": "string",
            "description": "The \u003ca\u003e target attribute of this menu item.",
            "enum": [
              "_blank",
              "_self",
              "_parent",
              "_top"
            ]
          },
          "targetRef": {
            "$ref": "#/components/schemas/Ref"
          }
        },
        "description": "The spec of menu item."
      },
      "MenuItemStatus": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Calculated Display name of menu item."
          },
          "href": {
            "type": "string",
            "description": "Calculated href of manu item."
          }
        },
        "description": "The status of menu item."
      },
      "MenuList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Menu"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "MenuSpec": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the menu."
          },
          "menuItems": {
            "uniqueItems": true,
            "type": "array",
            "description": "Names of menu children below this menu.",
            "items": {
              "type": "string",
              "description": "Names of menu children below this menu."
            }
          }
        },
        "description": "The spec of menu."
      },
      "Metadata": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "creationTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletionTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "finalizers": {
            "uniqueItems": true,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "generateName": {
            "type": "string",
            "description": "The name field will be generated automatically according to the given generateName field"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "Metadata name"
          },
          "version": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "MoveOperation": {
        "required": [
          "op",
          "from",
          "path"
        ],
        "type": "object",
        "properties": {
          "from": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "op": {
            "type": "string",
            "enum": [
              "move"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "PatSpec": {
        "required": [
          "name",
          "tokenId",
          "username"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "revokesAt": {
            "type": "string",
            "format": "date-time"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tokenId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PersonalAccessToken": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PatSpec"
          }
        }
      },
      "PersonalAccessTokenList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "Plugin": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PluginSpec"
          },
          "status": {
            "$ref": "#/components/schemas/PluginStatus"
          }
        }
      },
      "PluginAuthor": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "PluginList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Plugin"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "PluginSpec": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/PluginAuthor"
          },
          "configMapName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "homepage": {
            "type": "string"
          },
          "issues": {
            "type": "string"
          },
          "license": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "logo": {
            "type": "string"
          },
          "pluginClass": {
            "type": "string",
            "deprecated": true
          },
          "pluginDependencies": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "repo": {
            "type": "string"
          },
          "requires": {
            "type": "string"
          },
          "settingName": {
            "type": "string"
          },
          "version": {
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
            "type": "string"
          }
        }
      },
      "PluginStatus": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "entry": {
            "type": "string"
          },
          "lastProbeState": {
            "type": "string",
            "enum": [
              "CREATED",
              "DISABLED",
              "RESOLVED",
              "STARTED",
              "STOPPED",
              "FAILED",
              "UNLOADED"
            ]
          },
          "lastStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "loadLocation": {
            "type": "string",
            "description": "Load location of the plugin, often a path.",
            "format": "uri"
          },
          "logo": {
            "type": "string"
          },
          "phase": {
            "type": "string",
            "enum": [
              "PENDING",
              "STARTING",
              "CREATED",
              "DISABLING",
              "DISABLED",
              "RESOLVED",
              "STARTED",
              "STOPPED",
              "FAILED",
              "UNKNOWN"
            ]
          },
          "stylesheet": {
            "type": "string"
          }
        }
      },
      "Policy": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PolicySpec"
          }
        }
      },
      "PolicyList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "PolicyRule": {
        "type": "object",
        "properties": {
          "apiGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nonResourceURLs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "verbs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PolicySpec": {
        "required": [
          "displayName",
          "templateName"
        ],
        "type": "object",
        "properties": {
          "configMapName": {
            "type": "string",
            "description": "Reference name of ConfigMap extension"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of policy"
          },
          "templateName": {
            "type": "string",
            "description": "Reference name of PolicyTemplate"
          }
        }
      },
      "PolicyTemplate": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PolicyTemplateSpec"
          }
        }
      },
      "PolicyTemplateList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/PolicyTemplate"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "PolicyTemplateSpec": {
        "required": [
          "settingName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "settingName": {
            "type": "string"
          }
        }
      },
      "Post": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PostSpec"
          },
          "status": {
            "$ref": "#/components/schemas/PostStatus"
          }
        }
      },
      "PostList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Post"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "PostSpec": {
        "required": [
          "allowComment",
          "deleted",
          "excerpt",
          "pinned",
          "priority",
          "publish",
          "slug",
          "title",
          "visible"
        ],
        "type": "object",
        "properties": {
          "allowComment": {
            "type": "boolean",
            "default": true
          },
          "baseSnapshot": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cover": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "excerpt": {
            "$ref": "#/components/schemas/Excerpt"
          },
          "headSnapshot": {
            "type": "string"
          },
          "htmlMetas": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "owner": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "publish": {
            "type": "boolean",
            "default": false
          },
          "publishTime": {
            "type": "string",
            "format": "date-time"
          },
          "releaseSnapshot": {
            "type": "string"
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template": {
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "visible": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "INTERNAL",
              "PRIVATE"
            ],
            "default": "PUBLIC"
          }
        }
      },
      "PostStatus": {
        "required": [
          "phase"
        ],
        "type": "object",
        "properties": {
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "contributors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excerpt": {
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean"
          },
          "inProgress": {
            "type": "boolean"
          },
          "lastModifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "Ref": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "description": "Extension group"
          },
          "kind": {
            "type": "string",
            "description": "Extension kind"
          },
          "name": {
            "type": "string",
            "description": "Extension name. This field is mandatory"
          },
          "version": {
            "type": "string",
            "description": "Extension version"
          }
        },
        "description": "Extension reference object. The name is mandatory"
      },
      "RememberMeToken": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/RememberMeTokenSpec"
          }
        }
      },
      "RememberMeTokenList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/RememberMeToken"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "RememberMeTokenSpec": {
        "required": [
          "series",
          "tokenValue",
          "username"
        ],
        "type": "object",
        "properties": {
          "lastUsed": {
            "type": "string",
            "format": "date-time"
          },
          "series": {
            "minLength": 1,
            "type": "string"
          },
          "tokenValue": {
            "minLength": 1,
            "type": "string"
          },
          "username": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RemoveOperation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "remove"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "ReplaceOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "Reply": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec",
          "status"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ReplySpec"
          },
          "status": {
            "$ref": "#/components/schemas/ReplyStatus"
          }
        }
      },
      "ReplyList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Reply"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ReplySpec": {
        "required": [
          "allowNotification",
          "approved",
          "commentName",
          "content",
          "hidden",
          "owner",
          "priority",
          "raw",
          "top"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": true
          },
          "approved": {
            "type": "boolean",
            "default": false
          },
          "approvedTime": {
            "type": "string",
            "format": "date-time"
          },
          "commentName": {
            "minLength": 1,
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "ipAddress": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentOwner"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "quoteReply": {
            "type": "string"
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          },
          "top": {
            "type": "boolean",
            "default": false
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "ReplyStatus": {
        "type": "object",
        "properties": {
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReverseProxy": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReverseProxyRule"
            }
          }
        }
      },
      "ReverseProxyList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ReverseProxy"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ReverseProxyRule": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileReverseProxyProvider"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "Role": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "rules"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            }
          }
        }
      },
      "RoleBinding": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "roleRef": {
            "$ref": "#/components/schemas/RoleRef"
          },
          "subjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subject"
            }
          }
        }
      },
      "RoleBindingList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/RoleBinding"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "RoleList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "RoleRef": {
        "type": "object",
        "properties": {
          "apiGroup": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SearchEngine": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SearchEngineSpec"
          }
        }
      },
      "SearchEngineList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/SearchEngine"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "SearchEngineSpec": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "postSearchImpl": {
            "type": "string"
          },
          "settingRef": {
            "$ref": "#/components/schemas/Ref"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Secret": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "stringData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "SecretList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Secret"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "Setting": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SettingSpec"
          }
        }
      },
      "SettingForm": {
        "minLength": 1,
        "required": [
          "formSchema",
          "group"
        ],
        "type": "object",
        "properties": {
          "formSchema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "group": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "SettingList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Setting"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "SettingRef": {
        "required": [
          "group",
          "name"
        ],
        "type": "object",
        "properties": {
          "group": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SettingSpec": {
        "required": [
          "forms"
        ],
        "type": "object",
        "properties": {
          "forms": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingForm"
            }
          }
        }
      },
      "SinglePage": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SinglePageSpec"
          },
          "status": {
            "$ref": "#/components/schemas/SinglePageStatus"
          }
        }
      },
      "SinglePageList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/SinglePage"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "SinglePageSpec": {
        "required": [
          "allowComment",
          "deleted",
          "excerpt",
          "pinned",
          "priority",
          "publish",
          "slug",
          "title",
          "visible"
        ],
        "type": "object",
        "properties": {
          "allowComment": {
            "type": "boolean",
            "default": true
          },
          "baseSnapshot": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "excerpt": {
            "$ref": "#/components/schemas/Excerpt"
          },
          "headSnapshot": {
            "type": "string"
          },
          "htmlMetas": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "owner": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "publish": {
            "type": "boolean",
            "default": false
          },
          "publishTime": {
            "type": "string",
            "format": "date-time"
          },
          "releaseSnapshot": {
            "type": "string"
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "visible": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "INTERNAL",
              "PRIVATE"
            ],
            "default": "PUBLIC"
          }
        }
      },
      "SinglePageStatus": {
        "required": [
          "phase"
        ],
        "type": "object",
        "properties": {
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "contributors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excerpt": {
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean"
          },
          "inProgress": {
            "type": "boolean"
          },
          "lastModifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "SnapShotSpec": {
        "required": [
          "owner",
          "rawType",
          "subjectRef"
        ],
        "type": "object",
        "properties": {
          "contentPatch": {
            "type": "string"
          },
          "contributors": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lastModifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "minLength": 1,
            "type": "string"
          },
          "parentSnapshotName": {
            "type": "string"
          },
          "rawPatch": {
            "type": "string"
          },
          "rawType": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "subjectRef": {
            "$ref": "#/components/schemas/Ref"
          }
        }
      },
      "Snapshot": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SnapShotSpec"
          }
        }
      },
      "SnapshotList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Snapshot"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "Subject": {
        "type": "object",
        "properties": {
          "apiGroup": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Tag": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/TagSpec"
          },
          "status": {
            "$ref": "#/components/schemas/TagStatus"
          }
        }
      },
      "TagList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "TagSpec": {
        "required": [
          "displayName",
          "slug"
        ],
        "type": "object",
        "properties": {
          "color": {
            "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TagStatus": {
        "type": "object",
        "properties": {
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "postCount": {
            "type": "integer",
            "format": "int32"
          },
          "visiblePostCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TemplateDescriptor": {
        "required": [
          "file",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "file": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "screenshot": {
            "type": "string"
          }
        }
      },
      "TestOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "test"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "Theme": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ThemeSpec"
          },
          "status": {
            "$ref": "#/components/schemas/ThemeStatus"
          }
        }
      },
      "ThemeList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Theme"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ThemeSpec": {
        "required": [
          "author",
          "displayName",
          "version"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "configMapName": {
            "type": "string"
          },
          "customTemplates": {
            "$ref": "#/components/schemas/CustomTemplates"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "issues": {
            "type": "string"
          },
          "license": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "logo": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "require": {
            "type": "string",
            "description": "Deprecated, use `requires` instead.",
            "deprecated": true
          },
          "requires": {
            "type": "string"
          },
          "settingName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "deprecated": true
          }
        }
      },
      "ThemeStatus": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "location": {
            "type": "string"
          },
          "phase": {
            "type": "string",
            "enum": [
              "READY",
              "FAILED",
              "UNKNOWN"
            ]
          }
        }
      },
      "User": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/UserSpec"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          }
        }
      },
      "UserConnection": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/UserConnectionSpec"
          }
        }
      },
      "UserConnectionList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/UserConnection"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "UserConnectionSpec": {
        "required": [
          "accessToken",
          "displayName",
          "providerUserId",
          "registrationId",
          "username"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "profileUrl": {
            "type": "string"
          },
          "providerUserId": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "registrationId": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "UserSpec": {
        "required": [
          "displayName",
          "email"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "loginHistoryLimit": {
            "type": "integer",
            "format": "int32"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "totpEncryptedSecret": {
            "type": "string"
          },
          "twoFactorAuthEnabled": {
            "type": "boolean"
          }
        }
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "lastLoginAt": {
            "type": "string",
            "format": "date-time"
          },
          "loginHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoginHistory"
            }
          },
          "permalink": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}