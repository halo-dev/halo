{
  "openapi": "3.0.1",
  "info": {
    "title": "Halo",
    "version": "2.21.0-SNAPSHOT"
  },
  "servers": [
    {
      "url": "http://localhost:8091",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "basicAuth": [],
      "bearerAuth": []
    }
  ],
  "paths": {
    "/apis/api.console.halo.run/v1alpha1/attachments": {
      "get": {
        "operationId": "SearchAttachments",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Filter attachments without group. This parameter will ignore group parameter.",
            "in": "query",
            "name": "ungrouped",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Keyword for searching.",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Acceptable media types.",
            "in": "query",
            "name": "accepts",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AttachmentV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/attachments/-/upload-from-url": {
      "post": {
        "operationId": "ExternalTransferAttachment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFromUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AttachmentV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/attachments/upload": {
      "post": {
        "operationId": "UploadAttachment",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AttachmentV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/auth-providers": {
      "get": {
        "description": "Lists all auth providers",
        "operationId": "listAuthProviders",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListedAuthProvider"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AuthProviderV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/auth-providers/{name}/disable": {
      "put": {
        "description": "Disables an auth provider",
        "operationId": "disableAuthProvider",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AuthProviderV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/auth-providers/{name}/enable": {
      "put": {
        "description": "Enables an auth provider",
        "operationId": "enableAuthProvider",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "AuthProviderV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/comments": {
      "get": {
        "description": "List comments.",
        "operationId": "ListComments",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Comments filtered by keyword.",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Commenter kind.",
            "in": "query",
            "name": "ownerKind",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Commenter name.",
            "in": "query",
            "name": "ownerName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListedCommentList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "CommentV1alpha1Console"
        ]
      },
      "post": {
        "description": "Create a comment.",
        "operationId": "CreateComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "CommentV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/comments/{name}/reply": {
      "post": {
        "description": "Create a reply.",
        "operationId": "CreateReply",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Reply"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "CommentV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/indices/-/rebuild": {
      "post": {
        "description": "Rebuild all indices",
        "operationId": "RebuildAllIndices",
        "responses": {},
        "tags": [
          "IndicesV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/indices/post": {
      "post": {
        "deprecated": true,
        "description": "Build or rebuild post indices for full text search. This method is deprecated, please use POST /indices/-/rebuild instead.",
        "operationId": "BuildPostIndices",
        "responses": {},
        "tags": [
          "IndicesV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/notifiers/{name}/sender-config": {
      "get": {
        "description": "Fetch sender config of notifier",
        "operationId": "FetchSenderConfig",
        "parameters": [
          {
            "description": "Notifier name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "NotifierV1alpha1Console"
        ]
      },
      "post": {
        "description": "Save sender config of notifier",
        "operationId": "SaveSenderConfig",
        "parameters": [
          {
            "description": "Notifier name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {},
            "description": "default response"
          }
        },
        "tags": [
          "NotifierV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins": {
      "get": {
        "description": "List plugins using query criteria and sort params",
        "operationId": "ListPlugins",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Keyword of plugin name or description",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether the plugin is enabled",
            "in": "query",
            "name": "enabled",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PluginList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.css": {
      "get": {
        "description": "Merge all CSS bundles of enabled plugins into one.",
        "operationId": "fetchCssBundle",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.js": {
      "get": {
        "description": "Merge all JS bundles of enabled plugins into one.",
        "operationId": "fetchJsBundle",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/-/install-from-uri": {
      "post": {
        "description": "Install a plugin from uri.",
        "operationId": "InstallPluginFromUri",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallFromUriRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/install": {
      "post": {
        "description": "Install a plugin by uploading a Jar file.",
        "operationId": "InstallPlugin",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PluginInstallRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/config": {
      "get": {
        "description": "Fetch configMap of plugin by configured configMapName. it is deprecated since 2.20.0",
        "operationId": "fetchPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "Update the configMap of plugin setting, it is deprecated since 2.20.0",
        "operationId": "updatePluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/json-config": {
      "get": {
        "description": "Fetch converted json config of plugin by configured configMapName.",
        "operationId": "fetchPluginJsonConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update the config of plugin setting.",
        "operationId": "updatePluginJsonConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/plugin-state": {
      "put": {
        "description": "Change the running state of a plugin by name.",
        "operationId": "ChangePluginRunningState",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginRunningStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/reload": {
      "put": {
        "description": "Reload a plugin by name.",
        "operationId": "reloadPlugin",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/reset-config": {
      "put": {
        "description": "Reset the configMap of plugin setting.",
        "operationId": "ResetPluginConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/setting": {
      "get": {
        "description": "Fetch setting of plugin.",
        "operationId": "fetchPluginSetting",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade": {
      "post": {
        "description": "Upgrade a plugin by uploading a Jar file",
        "operationId": "UpgradePlugin",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PluginInstallRequest"
              }
            }
          },
          "required": true
        },
        "responses": {},
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade-from-uri": {
      "post": {
        "description": "Upgrade a plugin from uri.",
        "operationId": "UpgradePluginFromUri",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeFromUriRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PluginV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts": {
      "get": {
        "description": "List posts.",
        "operationId": "ListPosts",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Posts filtered by publish phase.",
            "in": "query",
            "name": "publishPhase",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "PENDING_APPROVAL",
                "PUBLISHED",
                "FAILED"
              ]
            }
          },
          {
            "description": "Posts filtered by keyword.",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Posts filtered by category including sub-categories.",
            "in": "query",
            "name": "categoryWithChildren",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListedPostList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      },
      "post": {
        "description": "Draft a post.",
        "operationId": "DraftPost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}": {
      "put": {
        "description": "Update a post.",
        "operationId": "UpdateDraftPost",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/content": {
      "delete": {
        "description": "Delete a content for post.",
        "operationId": "deletePostContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "snapshotName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      },
      "get": {
        "description": "Fetch content of post.",
        "operationId": "fetchPostContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "snapshotName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update a post\u0027s content.",
        "operationId": "UpdatePostContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Content"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/head-content": {
      "get": {
        "description": "Fetch head content of post.",
        "operationId": "fetchPostHeadContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/publish": {
      "put": {
        "description": "Publish a post.",
        "operationId": "PublishPost",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Head snapshot name of content.",
            "in": "query",
            "name": "headSnapshot",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "async",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/recycle": {
      "put": {
        "description": "Recycle a post.",
        "operationId": "RecyclePost",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/release-content": {
      "get": {
        "description": "Fetch release content of post.",
        "operationId": "fetchPostReleaseContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/revert-content": {
      "put": {
        "description": "Revert to specified snapshot for post content.",
        "operationId": "revertToSpecifiedSnapshotForPost",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertSnapshotForPostParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/snapshot": {
      "get": {
        "description": "List all snapshots for post content.",
        "operationId": "listPostSnapshots",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListedSnapshotDto"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/posts/{name}/unpublish": {
      "put": {
        "description": "Publish a post.",
        "operationId": "UnpublishPost",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "PostV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/replies": {
      "get": {
        "description": "List replies.",
        "operationId": "ListReplies",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Replies filtered by commentName.",
            "in": "query",
            "name": "commentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListedReplyList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ReplyV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages": {
      "get": {
        "description": "List single pages.",
        "operationId": "ListSinglePages",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "SinglePages filtered by contributor.",
            "in": "query",
            "name": "contributor",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "SinglePages filtered by publish phase.",
            "in": "query",
            "name": "publishPhase",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "PENDING_APPROVAL",
                "PUBLISHED",
                "FAILED"
              ]
            }
          },
          {
            "description": "SinglePages filtered by visibility.",
            "in": "query",
            "name": "visible",
            "schema": {
              "type": "string",
              "enum": [
                "PUBLIC",
                "INTERNAL",
                "PRIVATE"
              ]
            }
          },
          {
            "description": "SinglePages filtered by keyword.",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ListedSinglePageList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      },
      "post": {
        "description": "Draft a single page.",
        "operationId": "DraftSinglePage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SinglePageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}": {
      "put": {
        "description": "Update a single page.",
        "operationId": "UpdateDraftSinglePage",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SinglePageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/content": {
      "delete": {
        "description": "Delete a content for post.",
        "operationId": "deleteSinglePageContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "snapshotName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      },
      "get": {
        "description": "Fetch content of single page.",
        "operationId": "fetchSinglePageContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "snapshotName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update a single page\u0027s content.",
        "operationId": "UpdateSinglePageContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Content"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/head-content": {
      "get": {
        "description": "Fetch head content of single page.",
        "operationId": "fetchSinglePageHeadContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/publish": {
      "put": {
        "description": "Publish a single page.",
        "operationId": "PublishSinglePage",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePage"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/release-content": {
      "get": {
        "description": "Fetch release content of single page.",
        "operationId": "fetchSinglePageReleaseContent",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentWrapper"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/revert-content": {
      "put": {
        "description": "Revert to specified snapshot for single page content.",
        "operationId": "revertToSpecifiedSnapshotForSinglePage",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertSnapshotForSingleParam"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/singlepages/{name}/snapshot": {
      "get": {
        "description": "List all snapshots for single page content.",
        "operationId": "listSinglePageSnapshots",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListedSnapshotDto"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SinglePageV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/stats": {
      "get": {
        "description": "Get stats.",
        "operationId": "getStats",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStats"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "SystemV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/tags": {
      "get": {
        "description": "List Post Tags.",
        "operationId": "ListPostTags",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Post tags filtered by keyword.",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "TagV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes": {
      "get": {
        "description": "List themes.",
        "operationId": "ListThemes",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether to list uninstalled themes.",
            "in": "query",
            "name": "uninstalled",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/-/activation": {
      "get": {
        "description": "Fetch the activated theme.",
        "operationId": "fetchActivatedTheme",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/-/install-from-uri": {
      "post": {
        "description": "Install a theme from uri.",
        "operationId": "InstallThemeFromUri",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallFromUriRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/install": {
      "post": {
        "description": "Install a theme by uploading a zip file.",
        "operationId": "InstallTheme",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ThemeInstallRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/activation": {
      "put": {
        "description": "Activate a theme by name.",
        "operationId": "activateTheme",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/config": {
      "get": {
        "deprecated": true,
        "description": "Fetch configMap of theme by configured configMapName. It is deprecated.",
        "operationId": "fetchThemeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "Update the configMap of theme setting. It is deprecated.",
        "operationId": "updateThemeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/invalidate-cache": {
      "put": {
        "description": "Invalidate theme template cache.",
        "operationId": "InvalidateCache",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/json-config": {
      "get": {
        "description": "Fetch converted json config of theme by configured configMapName.",
        "operationId": "fetchThemeJsonConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update the configMap of theme setting.",
        "operationId": "updateThemeJsonConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/reload": {
      "put": {
        "description": "Reload theme setting.",
        "operationId": "Reload",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/reset-config": {
      "put": {
        "description": "Reset the configMap of theme setting.",
        "operationId": "ResetThemeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigMap"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/setting": {
      "get": {
        "description": "Fetch setting of theme.",
        "operationId": "fetchThemeSetting",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/upgrade": {
      "post": {
        "description": "Upgrade theme",
        "operationId": "UpgradeTheme",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {},
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/themes/{name}/upgrade-from-uri": {
      "post": {
        "description": "Upgrade a theme from uri.",
        "operationId": "UpgradeThemeFromUri",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeFromUriRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "ThemeV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users": {
      "get": {
        "description": "List users",
        "operationId": "ListUsers",
        "parameters": [
          {
            "description": "Page number. Default is 0.",
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Size number. Default is 0.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label selector. e.g.: hidden!\u003dtrue",
            "in": "query",
            "name": "labelSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Field selector. e.g.: metadata.name\u003d\u003dhalo",
            "in": "query",
            "name": "fieldSelector",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Keyword to search",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Role name",
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserEndpoint.ListedUserList"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      },
      "post": {
        "description": "Creates a new user.",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/-": {
      "get": {
        "description": "Get current user detail",
        "operationId": "GetCurrentUserDetail",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedUser"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update current user profile, but password.",
        "operationId": "UpdateCurrentUser",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/-/password": {
      "put": {
        "description": "Change own password of user.",
        "operationId": "ChangeOwnPassword",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOwnPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/-/send-email-verification-code": {
      "post": {
        "description": "Send email verification code for user",
        "operationId": "SendEmailVerificationCode",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {},
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/-/verify-email": {
      "post": {
        "description": "Verify email for user by code.",
        "operationId": "VerifyEmail",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {},
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/{name}": {
      "get": {
        "description": "Get user detail by name",
        "operationId": "GetUserDetail",
        "parameters": [
          {
            "description": "User name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedUser"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/{name}/avatar": {
      "delete": {
        "description": "delete user avatar",
        "operationId": "DeleteUserAvatar",
        "parameters": [
          {
            "description": "User name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      },
      "post": {
        "description": "upload user avatar",
        "operationId": "UploadUserAvatar",
        "parameters": [
          {
            "description": "User name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/IAvatarUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/{name}/password": {
      "put": {
        "description": "Change anyone password of user for admin.",
        "operationId": "ChangeAnyonePassword",
        "parameters": [
          {
            "description": "Name of user. If the name is equal to \u0027-\u0027, it will change the password of current user.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/api.console.halo.run/v1alpha1/users/{name}/permissions": {
      "get": {
        "description": "Get permissions of user",
        "operationId": "GetPermissions",
        "parameters": [
          {
            "description": "User name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermission"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      },
      "post": {
        "description": "Grant permissions to user",
        "operationId": "GrantPermission",
        "parameters": [
          {
            "description": "User name",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GrantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.halo.run/v1alpha1/systemconfigs/{group}": {
      "get": {
        "description": "Get system config by group",
        "operationId": "getSystemConfigByGroup",
        "parameters": [
          {
            "description": "Group of the system config",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "tags": [
          "SystemConfigV1alpha1Console"
        ]
      },
      "put": {
        "description": "Update system config by group",
        "operationId": "updateSystemConfigByGroup",
        "parameters": [
          {
            "description": "Group of the system config",
            "in": "path",
            "name": "group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204 NO_CONTENT": {
            "content": {},
            "description": "default response"
          }
        },
        "tags": [
          "SystemConfigV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.migration.halo.run/v1alpha1/backup-files": {
      "get": {
        "description": "Get backup files from backup root.",
        "operationId": "getBackupFiles",
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupFile"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "tags": [
          "MigrationV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.migration.halo.run/v1alpha1/backups/{name}/files/{filename}": {
      "get": {
        "operationId": "DownloadBackups",
        "parameters": [
          {
            "description": "Backup name.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Backup filename.",
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": [
          "MigrationV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.migration.halo.run/v1alpha1/restorations": {
      "post": {
        "description": "Restore backup by uploading file or providing download link or backup name.",
        "operationId": "RestoreBackup",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RestoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {},
        "tags": [
          "MigrationV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.notification.halo.run/v1alpha1/notifiers/default-email-notifier/verify-connection": {
      "post": {
        "description": "Verify email sender config.",
        "operationId": "VerifyEmailSenderConfig",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfigValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {},
            "description": "default response"
          }
        },
        "tags": [
          "NotifierV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.security.halo.run/v1alpha1/users/{username}/disable": {
      "post": {
        "description": "Disable user by username",
        "operationId": "DisableUser",
        "parameters": [
          {
            "description": "Username",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The user has been disabled."
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    },
    "/apis/console.api.security.halo.run/v1alpha1/users/{username}/enable": {
      "post": {
        "description": "Enable user by username",
        "operationId": "EnableUser",
        "parameters": [
          {
            "description": "Username",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The user has been enabled."
          }
        },
        "tags": [
          "UserV1alpha1Console"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "add"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "Attachment": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/AttachmentSpec"
          },
          "status": {
            "$ref": "#/components/schemas/AttachmentStatus"
          }
        }
      },
      "AttachmentList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "AttachmentSpec": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of attachment"
          },
          "groupName": {
            "type": "string",
            "description": "Group name"
          },
          "mediaType": {
            "type": "string",
            "description": "Media type of attachment"
          },
          "ownerName": {
            "type": "string",
            "description": "Name of User who uploads the attachment"
          },
          "policyName": {
            "type": "string",
            "description": "Policy name"
          },
          "size": {
            "minimum": 0,
            "type": "integer",
            "description": "Size of attachment. Unit is Byte",
            "format": "int64"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "Tags of attachment",
            "items": {
              "type": "string",
              "description": "Tag name"
            }
          }
        }
      },
      "AttachmentStatus": {
        "type": "object",
        "properties": {
          "permalink": {
            "type": "string",
            "description": "Permalink of attachment.\nIf it is in local storage, the public URL will be set.\nIf it is in s3 storage, the Object URL will be set.\n"
          },
          "thumbnails": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "AuthProvider": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/AuthProviderSpec"
          }
        },
        "description": "Auth provider extension."
      },
      "AuthProviderSpec": {
        "required": [
          "authType",
          "authenticationUrl",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "authType": {
            "type": "string",
            "description": "Auth type: form or oauth2.",
            "enum": [
              "FORM",
              "OAUTH2"
            ]
          },
          "authenticationUrl": {
            "type": "string",
            "description": "Authentication url of the auth provider"
          },
          "bindingUrl": {
            "type": "string"
          },
          "configMapRef": {
            "$ref": "#/components/schemas/ConfigMapRef"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "Display name of the auth provider"
          },
          "helpPage": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "rememberMeSupport": {
            "type": "boolean"
          },
          "settingRef": {
            "$ref": "#/components/schemas/SettingRef"
          },
          "unbindUrl": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "Author": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "BackupFile": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Filename of backup file."
          },
          "lastModifiedTime": {
            "type": "string",
            "description": "Last modified time of backup file.",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "description": "Size of backup file.",
            "format": "int64"
          }
        },
        "description": "Backup file."
      },
      "Category": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/CategorySpec"
          },
          "status": {
            "$ref": "#/components/schemas/CategoryStatus"
          }
        }
      },
      "CategorySpec": {
        "required": [
          "displayName",
          "priority",
          "slug"
        ],
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cover": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean",
            "description": "\u003cp\u003eWhether to hide the category from the category list.\u003c/p\u003e\n \u003cp\u003eWhen set to true, the category including its subcategories and related posts will\n not be displayed in the category list, but it can still be accessed by permalink.\u003c/p\u003e\n \u003cp\u003eLimitation: It only takes effect on the theme-side categorized list and it only\n allows to be set to true on the first level(root node) of categories.\u003c/p\u003e"
          },
          "postTemplate": {
            "maxLength": 255,
            "type": "string",
            "description": "\u003cp\u003eUsed to specify the template for the posts associated with the category.\u003c/p\u003e\n \u003cp\u003eThe priority is not as high as that of the post.\u003c/p\u003e\n \u003cp\u003eIf the post also specifies a template, the post\u0027s template will prevail.\u003c/p\u003e"
          },
          "preventParentPostCascadeQuery": {
            "type": "boolean",
            "description": "\u003cp\u003eif a category is queried for related posts, the default behavior is to\n query all posts under the category including its subcategories, but if this field is\n set to true, cascade query behavior will be terminated here.\u003c/p\u003e\n \u003cp\u003eFor example, if a category has subcategories A and B, and A has subcategories C and\n D and C marked this field as true, when querying posts under A category,all posts under A\n and B will be queried, but C and D will not be queried.\u003c/p\u003e"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "template": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "CategoryStatus": {
        "type": "object",
        "properties": {
          "permalink": {
            "type": "string"
          },
          "postCount": {
            "type": "integer",
            "description": "包括当前和其下所有层级的文章数量 (depth\u003dmax).",
            "format": "int32"
          },
          "visiblePostCount": {
            "type": "integer",
            "description": "包括当前和其下所有层级的已发布且公开的文章数量 (depth\u003dmax).",
            "format": "int32"
          }
        }
      },
      "ChangeOwnPasswordRequest": {
        "required": [
          "oldPassword",
          "password"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Old password."
          },
          "password": {
            "minLength": 5,
            "type": "string",
            "description": "New password."
          }
        }
      },
      "ChangePasswordRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 5,
            "type": "string",
            "description": "New password."
          }
        }
      },
      "Comment": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/CommentSpec"
          },
          "status": {
            "$ref": "#/components/schemas/CommentStatus"
          }
        }
      },
      "CommentEmailOwner": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "description": "avatar for comment owner"
          },
          "displayName": {
            "type": "string",
            "description": "display name for comment owner"
          },
          "email": {
            "type": "string",
            "description": "email for comment owner"
          },
          "website": {
            "type": "string",
            "description": "website for comment owner"
          }
        },
        "description": "\u003cp\u003eThe creator info of the comment.\u003c/p\u003e\n This {@link CommentEmailOwner CommentEmailOwner} is only applicable to the user who is allowed to comment\n without logging in."
      },
      "CommentOwner": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "displayName": {
            "type": "string"
          },
          "kind": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "maxLength": 64,
            "type": "string"
          }
        }
      },
      "CommentRequest": {
        "required": [
          "content",
          "raw",
          "subjectRef"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": false
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentEmailOwner"
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          },
          "subjectRef": {
            "$ref": "#/components/schemas/Ref"
          }
        },
        "description": "Request parameter object for {@link Comment Comment}."
      },
      "CommentSpec": {
        "required": [
          "allowNotification",
          "approved",
          "content",
          "hidden",
          "owner",
          "priority",
          "raw",
          "subjectRef",
          "top"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": true
          },
          "approved": {
            "type": "boolean",
            "default": false
          },
          "approvedTime": {
            "type": "string",
            "format": "date-time"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "creationTime": {
            "type": "string",
            "description": "The user-defined creation time default is \u003ccode\u003emetadata.creationTimestamp\u003c/code\u003e.",
            "format": "date-time"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "ipAddress": {
            "type": "string"
          },
          "lastReadTime": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentOwner"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          },
          "subjectRef": {
            "$ref": "#/components/schemas/Ref"
          },
          "top": {
            "type": "boolean",
            "default": false
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "CommentStats": {
        "type": "object",
        "properties": {
          "upvote": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "comment stats value object."
      },
      "CommentStatus": {
        "type": "object",
        "properties": {
          "hasNewReply": {
            "type": "boolean"
          },
          "lastReplyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "replyCount": {
            "type": "integer",
            "format": "int32"
          },
          "unreadReplyCount": {
            "type": "integer",
            "format": "int32"
          },
          "visibleReplyCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Condition": {
        "required": [
          "lastTransitionTime",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "lastTransitionTime": {
            "type": "string",
            "description": "Last time the condition transitioned from one status to another.",
            "format": "date-time"
          },
          "message": {
            "maxLength": 32768,
            "type": "string",
            "description": "Human-readable message indicating details about last transition.\n This may be an empty string."
          },
          "reason": {
            "maxLength": 1024,
            "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
            "type": "string",
            "description": "Unique, one-word, CamelCase reason for the condition\u0027s last transition."
          },
          "status": {
            "type": "string",
            "description": "Status is the status of the condition. Can be True, False, Unknown.",
            "enum": [
              "TRUE",
              "FALSE",
              "UNKNOWN"
            ]
          },
          "type": {
            "maxLength": 316,
            "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
            "type": "string",
            "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n example: Ready, Initialized.\n maxLength: 316."
          }
        },
        "description": "EqualsAndHashCode 排除了lastTransitionTime否则失败时，lastTransitionTime 会被更新\n 导致 equals 为 false，一直被加入队列."
      },
      "ConfigMap": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "description": "\u003cp\u003eConfigMap holds configuration data to consume.\u003c/p\u003e"
      },
      "ConfigMapRef": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Content": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          },
          "rawType": {
            "type": "string"
          }
        }
      },
      "ContentUpdateParam": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          },
          "rawType": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ContentWrapper": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          },
          "rawType": {
            "type": "string"
          },
          "snapshotName": {
            "type": "string"
          }
        }
      },
      "Contributor": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Contributor from user."
      },
      "CopyOperation": {
        "required": [
          "op",
          "from",
          "path"
        ],
        "type": "object",
        "properties": {
          "from": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "op": {
            "type": "string",
            "enum": [
              "copy"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "CreateUserRequest": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "avatar": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomTemplates": {
        "type": "object",
        "properties": {
          "category": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          },
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          },
          "post": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateDescriptor"
            }
          }
        }
      },
      "DashboardStats": {
        "type": "object",
        "properties": {
          "approvedComments": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "integer",
            "format": "int32"
          },
          "posts": {
            "type": "integer",
            "format": "int32"
          },
          "upvotes": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "integer",
            "format": "int32"
          },
          "visits": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DetailedUser": {
        "required": [
          "roles",
          "user"
        ],
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "EmailConfigValidationRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Gets email display name."
          },
          "enable": {
            "type": "boolean"
          },
          "encryption": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "sender": {
            "type": "string",
            "description": "Gets email sender address."
          },
          "username": {
            "type": "string"
          }
        }
      },
      "EmailVerifyRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "Excerpt": {
        "required": [
          "autoGenerate"
        ],
        "type": "object",
        "properties": {
          "autoGenerate": {
            "type": "boolean",
            "default": true
          },
          "raw": {
            "type": "string"
          }
        }
      },
      "Extension": {
        "required": [
          "apiVersion",
          "kind",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "description": "Extension is an interface which represents an Extension. It contains setters and getters of\n GroupVersionKind and Metadata."
      },
      "GrantRequest": {
        "type": "object",
        "properties": {
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IAvatarUploadRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "IUploadRequest": {
        "required": [
          "file",
          "policyName"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "groupName": {
            "type": "string",
            "description": "The name of the group to which the attachment belongs"
          },
          "policyName": {
            "type": "string",
            "description": "Storage policy name"
          }
        }
      },
      "InstallFromUriRequest": {
        "required": [
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "JsonPatch": {
        "minItems": 1,
        "uniqueItems": true,
        "type": "array",
        "description": "JSON schema for JSONPatch operations",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/AddOperation"
            },
            {
              "$ref": "#/components/schemas/ReplaceOperation"
            },
            {
              "$ref": "#/components/schemas/TestOperation"
            },
            {
              "$ref": "#/components/schemas/RemoveOperation"
            },
            {
              "$ref": "#/components/schemas/MoveOperation"
            },
            {
              "$ref": "#/components/schemas/CopyOperation"
            }
          ]
        }
      },
      "License": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "description": "Common data objects for license."
      },
      "ListedAuthProvider": {
        "required": [
          "displayName",
          "name"
        ],
        "type": "object",
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "FORM",
              "OAUTH2"
            ]
          },
          "authenticationUrl": {
            "type": "string"
          },
          "bindingUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "helpPage": {
            "type": "string"
          },
          "isBound": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "privileged": {
            "type": "boolean"
          },
          "supportsBinding": {
            "type": "boolean"
          },
          "unbindingUrl": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        },
        "description": "A listed value object for {@link run.halo.app.core.extension.AuthProvider run.halo.app.core.extension.AuthProvider}."
      },
      "ListedComment": {
        "required": [
          "comment",
          "owner",
          "stats"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/Comment"
          },
          "owner": {
            "$ref": "#/components/schemas/OwnerInfo"
          },
          "stats": {
            "$ref": "#/components/schemas/CommentStats"
          },
          "subject": {
            "$ref": "#/components/schemas/Extension"
          }
        },
        "description": "A chunk of items."
      },
      "ListedCommentList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ListedComment"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ListedPost": {
        "required": [
          "categories",
          "contributors",
          "owner",
          "post",
          "stats",
          "tags"
        ],
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contributor"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Contributor"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          },
          "stats": {
            "$ref": "#/components/schemas/Stats"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "description": "A chunk of items."
      },
      "ListedPostList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ListedPost"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ListedReply": {
        "required": [
          "owner",
          "reply",
          "stats"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/OwnerInfo"
          },
          "reply": {
            "$ref": "#/components/schemas/Reply"
          },
          "stats": {
            "$ref": "#/components/schemas/CommentStats"
          }
        },
        "description": "A chunk of items."
      },
      "ListedReplyList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ListedReply"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ListedSinglePage": {
        "required": [
          "contributors",
          "owner",
          "page",
          "stats"
        ],
        "type": "object",
        "properties": {
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contributor"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Contributor"
          },
          "page": {
            "$ref": "#/components/schemas/SinglePage"
          },
          "stats": {
            "$ref": "#/components/schemas/Stats"
          }
        },
        "description": "A chunk of items."
      },
      "ListedSinglePageList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ListedSinglePage"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ListedSnapshotDto": {
        "required": [
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ListedSnapshotSpec"
          }
        }
      },
      "ListedSnapshotSpec": {
        "required": [
          "owner"
        ],
        "type": "object",
        "properties": {
          "modifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "type": "string"
          }
        }
      },
      "ListedUser": {
        "required": [
          "roles",
          "user"
        ],
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "A chunk of items."
      },
      "LoginHistory": {
        "required": [
          "loginAt",
          "sourceIp",
          "successful",
          "userAgent"
        ],
        "type": "object",
        "properties": {
          "loginAt": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string"
          },
          "sourceIp": {
            "type": "string"
          },
          "successful": {
            "type": "boolean"
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "Metadata": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations are like key-value format."
          },
          "creationTimestamp": {
            "type": "string",
            "description": "Creation timestamp of the Extension.",
            "format": "date-time",
            "nullable": true
          },
          "deletionTimestamp": {
            "type": "string",
            "description": "Deletion timestamp of the Extension.",
            "format": "date-time",
            "nullable": true
          },
          "finalizers": {
            "uniqueItems": true,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string",
              "nullable": true
            }
          },
          "generateName": {
            "type": "string",
            "description": "The name field will be generated automatically according to the given generateName field"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are like key-value format."
          },
          "name": {
            "type": "string",
            "description": "Metadata name"
          },
          "version": {
            "type": "integer",
            "description": "Current version of the Extension. It will be bumped up every update.",
            "format": "int64",
            "nullable": true
          }
        },
        "description": "Metadata of Extension."
      },
      "MoveOperation": {
        "required": [
          "op",
          "from",
          "path"
        ],
        "type": "object",
        "properties": {
          "from": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "op": {
            "type": "string",
            "enum": [
              "move"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "OwnerInfo": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Comment owner info."
      },
      "Plugin": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PluginSpec"
          },
          "status": {
            "$ref": "#/components/schemas/PluginStatus"
          }
        },
        "description": "A custom resource for Plugin."
      },
      "PluginAuthor": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "PluginInstallRequest": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          },
          "presetName": {
            "type": "string",
            "description": "Plugin preset name. We will find the plugin from plugin presets"
          },
          "source": {
            "type": "string",
            "description": "Install source. Default is file.",
            "enum": [
              "FILE",
              "PRESET",
              "URL"
            ]
          }
        }
      },
      "PluginList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Plugin"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "PluginRunningStateRequest": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean"
          },
          "enable": {
            "type": "boolean"
          }
        }
      },
      "PluginSpec": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/PluginAuthor"
          },
          "configMapName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "homepage": {
            "type": "string"
          },
          "issues": {
            "type": "string"
          },
          "license": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "logo": {
            "type": "string"
          },
          "pluginClass": {
            "type": "string",
            "deprecated": true
          },
          "pluginDependencies": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "repo": {
            "type": "string"
          },
          "requires": {
            "type": "string",
            "description": "SemVer format."
          },
          "settingName": {
            "type": "string"
          },
          "version": {
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
            "type": "string",
            "description": "plugin version."
          }
        }
      },
      "PluginStatus": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "entry": {
            "type": "string"
          },
          "lastProbeState": {
            "type": "string",
            "enum": [
              "CREATED",
              "DISABLED",
              "RESOLVED",
              "STARTED",
              "STOPPED",
              "FAILED",
              "UNLOADED"
            ]
          },
          "lastStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "loadLocation": {
            "type": "string",
            "description": "Load location of the plugin, often a path.",
            "format": "uri"
          },
          "logo": {
            "type": "string"
          },
          "phase": {
            "type": "string",
            "enum": [
              "PENDING",
              "STARTING",
              "CREATED",
              "DISABLING",
              "DISABLED",
              "RESOLVED",
              "STARTED",
              "STOPPED",
              "FAILED",
              "UNKNOWN"
            ]
          },
          "stylesheet": {
            "type": "string"
          }
        }
      },
      "PolicyRule": {
        "type": "object",
        "properties": {
          "apiGroups": {
            "type": "array",
            "description": "APIGroups is the name of the APIGroup that contains the resources.\n If multiple API groups are specified, any action requested against one of the enumerated\n resources in any API group will be allowed.",
            "items": {
              "type": "string"
            }
          },
          "nonResourceURLs": {
            "type": "array",
            "description": "NonResourceURLs is a set of partial urls that a user should have access to.\n *s are allowed, but only as the full, final step in the path\n If an action is not a resource API request, then the URL is split on \u0027/\u0027 and is checked\n against the NonResourceURLs to look for a match.\n Since non-resource URLs are not namespaced, this field is only applicable for\n ClusterRoles referenced from a ClusterRoleBinding.\n Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource\n URL paths (such as \"/api\"),  but not both.",
            "items": {
              "type": "string"
            }
          },
          "resourceNames": {
            "type": "array",
            "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set\n means that everything is allowed.",
            "items": {
              "type": "string"
            }
          },
          "resources": {
            "type": "array",
            "description": "Resources is a list of resources this rule applies to.  \u0027*\u0027 represents all resources in\n the specified apiGroups.\n \u0027*\u0026#47;foo\u0027 represents the subresource \u0027foo\u0027 for all resources in the specified\n apiGroups.",
            "items": {
              "type": "string"
            }
          },
          "verbs": {
            "type": "array",
            "description": "about who the rule applies to or which namespace the rule applies to.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "PolicyRule holds information that describes a policy rule, but does not contain information\n about whom the rule applies to or which namespace the rule applies to."
      },
      "Post": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/PostSpec"
          },
          "status": {
            "$ref": "#/components/schemas/PostStatus"
          }
        },
        "description": "\u003cp\u003ePost extension.\u003c/p\u003e"
      },
      "PostRequest": {
        "required": [
          "post"
        ],
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ContentUpdateParam"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          }
        },
        "description": "Post and content data for creating and updating post."
      },
      "PostSpec": {
        "required": [
          "allowComment",
          "deleted",
          "excerpt",
          "pinned",
          "priority",
          "publish",
          "slug",
          "title",
          "visible"
        ],
        "type": "object",
        "properties": {
          "allowComment": {
            "type": "boolean",
            "default": true
          },
          "baseSnapshot": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cover": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "excerpt": {
            "$ref": "#/components/schemas/Excerpt"
          },
          "headSnapshot": {
            "type": "string"
          },
          "htmlMetas": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "owner": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "publish": {
            "type": "boolean",
            "default": false
          },
          "publishTime": {
            "type": "string",
            "format": "date-time"
          },
          "releaseSnapshot": {
            "type": "string",
            "description": "文章引用到的已发布的内容，用于主题端显示."
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template": {
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "visible": {
            "type": "string",
            "default": "PUBLIC",
            "enum": [
              "PUBLIC",
              "INTERNAL",
              "PRIVATE"
            ]
          }
        }
      },
      "PostStatus": {
        "type": "object",
        "properties": {
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "contributors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excerpt": {
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean",
            "description": "see {@link Category.CategorySpec#isHideFromList Category.CategorySpec#isHideFromList()}."
          },
          "inProgress": {
            "type": "boolean"
          },
          "lastModifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "Ref": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "description": "Extension group"
          },
          "kind": {
            "type": "string",
            "description": "Extension kind"
          },
          "name": {
            "type": "string",
            "description": "Extension name. This field is mandatory"
          },
          "version": {
            "type": "string",
            "description": "Extension version"
          }
        },
        "description": "Extension reference object. The name is mandatory"
      },
      "RemoveOperation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "remove"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          }
        }
      },
      "ReplaceOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "Reply": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec",
          "status"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ReplySpec"
          },
          "status": {
            "$ref": "#/components/schemas/ReplyStatus"
          }
        }
      },
      "ReplyRequest": {
        "required": [
          "content",
          "raw"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": false
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentEmailOwner"
          },
          "quoteReply": {
            "type": "string"
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "A request parameter object for {@link Reply Reply}."
      },
      "ReplySpec": {
        "required": [
          "allowNotification",
          "approved",
          "commentName",
          "content",
          "hidden",
          "owner",
          "priority",
          "raw",
          "top"
        ],
        "type": "object",
        "properties": {
          "allowNotification": {
            "type": "boolean",
            "default": true
          },
          "approved": {
            "type": "boolean",
            "default": false
          },
          "approvedTime": {
            "type": "string",
            "format": "date-time"
          },
          "commentName": {
            "minLength": 1,
            "type": "string"
          },
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "creationTime": {
            "type": "string",
            "description": "The user-defined creation time default is \u003ccode\u003emetadata.creationTimestamp\u003c/code\u003e.",
            "format": "date-time"
          },
          "hidden": {
            "type": "boolean",
            "default": false
          },
          "ipAddress": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/CommentOwner"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "quoteReply": {
            "type": "string"
          },
          "raw": {
            "minLength": 1,
            "type": "string"
          },
          "top": {
            "type": "boolean",
            "default": false
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "ReplyStatus": {
        "type": "object",
        "properties": {
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RestoreRequest": {
        "type": "object",
        "properties": {
          "backupName": {
            "type": "string",
            "description": "Backup metadata name."
          },
          "downloadUrl": {
            "type": "string",
            "description": "Remote backup HTTP URL."
          },
          "file": {
            "type": "string",
            "format": "binary"
          },
          "filename": {
            "type": "string",
            "description": "Filename of backup file in backups root."
          }
        }
      },
      "RevertSnapshotForPostParam": {
        "required": [
          "snapshotName"
        ],
        "type": "object",
        "properties": {
          "snapshotName": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "RevertSnapshotForSingleParam": {
        "required": [
          "snapshotName"
        ],
        "type": "object",
        "properties": {
          "snapshotName": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Role": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "rules"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRule"
            }
          }
        }
      },
      "Setting": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SettingSpec"
          }
        },
        "description": "{@link Setting Setting} is a custom extension to generate forms based on configuration."
      },
      "SettingForm": {
        "minLength": 1,
        "required": [
          "formSchema",
          "group"
        ],
        "type": "object",
        "properties": {
          "formSchema": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "group": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "SettingRef": {
        "required": [
          "group",
          "name"
        ],
        "type": "object",
        "properties": {
          "group": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SettingSpec": {
        "required": [
          "forms"
        ],
        "type": "object",
        "properties": {
          "forms": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingForm"
            }
          }
        }
      },
      "SinglePage": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/SinglePageSpec"
          },
          "status": {
            "$ref": "#/components/schemas/SinglePageStatus"
          }
        },
        "description": "\u003cp\u003eSingle page extension.\u003c/p\u003e"
      },
      "SinglePageRequest": {
        "required": [
          "content",
          "page"
        ],
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ContentUpdateParam"
          },
          "page": {
            "$ref": "#/components/schemas/SinglePage"
          }
        },
        "description": "A request parameter for {@link SinglePage SinglePage}."
      },
      "SinglePageSpec": {
        "required": [
          "allowComment",
          "deleted",
          "excerpt",
          "pinned",
          "priority",
          "publish",
          "slug",
          "title",
          "visible"
        ],
        "type": "object",
        "properties": {
          "allowComment": {
            "type": "boolean",
            "default": true
          },
          "baseSnapshot": {
            "type": "string"
          },
          "cover": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": false
          },
          "excerpt": {
            "$ref": "#/components/schemas/Excerpt"
          },
          "headSnapshot": {
            "type": "string"
          },
          "htmlMetas": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "owner": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean",
            "default": false
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "publish": {
            "type": "boolean",
            "default": false
          },
          "publishTime": {
            "type": "string",
            "format": "date-time"
          },
          "releaseSnapshot": {
            "type": "string",
            "description": "引用到的已发布的内容，用于主题端显示."
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "title": {
            "minLength": 1,
            "type": "string"
          },
          "visible": {
            "type": "string",
            "default": "PUBLIC",
            "enum": [
              "PUBLIC",
              "INTERNAL",
              "PRIVATE"
            ]
          }
        }
      },
      "SinglePageStatus": {
        "type": "object",
        "properties": {
          "commentsCount": {
            "type": "integer",
            "format": "int32"
          },
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "contributors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excerpt": {
            "type": "string"
          },
          "hideFromList": {
            "type": "boolean",
            "description": "see {@link Category.CategorySpec#isHideFromList Category.CategorySpec#isHideFromList()}."
          },
          "inProgress": {
            "type": "boolean"
          },
          "lastModifyTime": {
            "type": "string",
            "format": "date-time"
          },
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "phase": {
            "type": "string"
          }
        }
      },
      "Stats": {
        "type": "object",
        "properties": {
          "approvedComment": {
            "type": "integer",
            "format": "int32"
          },
          "totalComment": {
            "type": "integer",
            "format": "int32"
          },
          "upvote": {
            "type": "integer",
            "format": "int32"
          },
          "visit": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Stats value object."
      },
      "Tag": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/TagSpec"
          },
          "status": {
            "$ref": "#/components/schemas/TagStatus"
          }
        },
        "description": "A chunk of items."
      },
      "TagList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "TagSpec": {
        "required": [
          "displayName",
          "slug"
        ],
        "type": "object",
        "properties": {
          "color": {
            "pattern": "^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$",
            "type": "string",
            "description": "Color regex explanation.\n \u003cpre\u003e\n ^                 # start of the line\n #                 # start with a number sign `#`\n (                 # start of (group 1)\n   [a-fA-F0-9]{6}  # support z-f, A-F and 0-9, with a length of 6\n   |               # or\n   [a-fA-F0-9]{3}  # support z-f, A-F and 0-9, with a length of 3\n )                 # end of (group 1)\n $                 # end of the line\n \u003c/pre\u003e"
          },
          "cover": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "slug": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TagStatus": {
        "type": "object",
        "properties": {
          "observedVersion": {
            "type": "integer",
            "format": "int64"
          },
          "permalink": {
            "type": "string"
          },
          "postCount": {
            "type": "integer",
            "format": "int32"
          },
          "visiblePostCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TemplateDescriptor": {
        "required": [
          "file",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "file": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "screenshot": {
            "type": "string"
          }
        },
        "description": "Type used to describe custom template page."
      },
      "TestOperation": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "test"
            ]
          },
          "path": {
            "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$",
            "type": "string",
            "description": "A JSON Pointer path pointing to the location to move/copy from.",
            "example": "/a/b/c"
          },
          "value": {
            "description": "Value can be any JSON value"
          }
        }
      },
      "Theme": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/ThemeSpec"
          },
          "status": {
            "$ref": "#/components/schemas/ThemeStatus"
          }
        },
        "description": "\u003cp\u003eTheme extension.\u003c/p\u003e"
      },
      "ThemeInstallRequest": {
        "type": "object"
      },
      "ThemeList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/Theme"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "ThemeSpec": {
        "required": [
          "author",
          "displayName",
          "version"
        ],
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "configMapName": {
            "type": "string"
          },
          "customTemplates": {
            "$ref": "#/components/schemas/CustomTemplates"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "homepage": {
            "type": "string",
            "description": "Compatible with {@link run.halo.app.core.extension.Theme$ThemeSpec#website #website} property."
          },
          "issues": {
            "type": "string"
          },
          "license": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "logo": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "require": {
            "type": "string",
            "description": "Deprecated, use `requires` instead.",
            "deprecated": true
          },
          "requires": {
            "type": "string",
            "description": "if requires is not empty, then return requires, else return require or \u003ccode\u003eWILDCARD\u003c/code\u003e."
          },
          "settingName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "website": {
            "type": "string",
            "deprecated": true
          }
        }
      },
      "ThemeStatus": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          },
          "location": {
            "type": "string"
          },
          "phase": {
            "type": "string",
            "enum": [
              "READY",
              "FAILED",
              "UNKNOWN"
            ]
          }
        }
      },
      "UpgradeFromUriRequest": {
        "required": [
          "uri"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "UpgradeRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UploadFromUrlRequest": {
        "required": [
          "policyName",
          "url"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "policyName": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "User": {
        "required": [
          "apiVersion",
          "kind",
          "metadata",
          "spec"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "spec": {
            "$ref": "#/components/schemas/UserSpec"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          }
        },
        "description": "The extension represents user details of Halo."
      },
      "UserEndpoint.ListedUserList": {
        "required": [
          "first",
          "hasNext",
          "hasPrevious",
          "items",
          "last",
          "page",
          "size",
          "total",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "boolean",
            "description": "Indicates whether current page is the first page."
          },
          "hasNext": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "hasPrevious": {
            "type": "boolean",
            "description": "Indicates whether current page has previous page."
          },
          "items": {
            "type": "array",
            "description": "A chunk of items.",
            "items": {
              "$ref": "#/components/schemas/ListedUser"
            }
          },
          "last": {
            "type": "boolean",
            "description": "Indicates whether current page is the last page."
          },
          "page": {
            "type": "integer",
            "description": "Page number, starts from 1. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of each page. If not set or equal to 0, it means no pagination.",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "description": "Total elements.",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Indicates total pages.",
            "format": "int64"
          }
        }
      },
      "UserPermission": {
        "required": [
          "permissions",
          "roles",
          "uiPermissions"
        ],
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "uiPermissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserSpec": {
        "required": [
          "displayName",
          "email"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "loginHistoryLimit": {
            "type": "integer",
            "format": "int32"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time"
          },
          "totpEncryptedSecret": {
            "type": "string"
          },
          "twoFactorAuthEnabled": {
            "type": "boolean"
          }
        }
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "lastLoginAt": {
            "type": "string",
            "format": "date-time"
          },
          "loginHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoginHistory"
            }
          },
          "permalink": {
            "type": "string"
          }
        }
      },
      "VerifyCodeRequest": {
        "required": [
          "code",
          "password"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}